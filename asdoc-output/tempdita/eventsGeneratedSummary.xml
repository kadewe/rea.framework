<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="DisplayApplication.Components">
      <apiName>DisplayApplication.Components</apiName>
      <apiClassifier id="DisplayApplication.Components:SmallEyeButton">
         <apiName>SmallEyeButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:MiniSoundButton">
         <apiName>MiniSoundButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:SmallSoundButton">
         <apiName>SmallSoundButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:SelectableImage">
         <apiName>SelectableImage</apiName>
         <shortdesc>
	 A simple extension of an image, inmplementing the selectable idea.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface>
               <apiBaseClassifier>Shared:CustomImage</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A simple extension of an image, inmplementing the selectable idea. This image can be uses with others to simulate an image based single- or multiple choice construct.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:BackButton">
         <apiName>BackButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:CustomCheckBox">
         <apiName>CustomCheckBox</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface>
               <apiBaseClassifier>spark.components:CheckBox</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:ForwardButton">
         <apiName>ForwardButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:StartButton">
         <apiName>StartButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:CustomDesignButton">
         <apiName>CustomDesignButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:CustomTextInput">
         <apiName>CustomTextInput</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomWritable</apiBaseInterface>
               <apiBaseClassifier>spark.components:TextInput</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:SoundButton">
         <apiName>SoundButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:CustomButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.Components:CustomRadioButton">
         <apiName>CustomRadioButton</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface>
               <apiBaseClassifier>spark.components:RadioButton</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="DisplayApplication.CustomSkins">
      <apiName>DisplayApplication.CustomSkins</apiName>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomForwardButtonSkin">
         <apiName>CustomForwardButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
</apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomSoundButtonSkin">
         <apiName>CustomSoundButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
</apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin">
         <apiName>CustomVideoPlayerSkin</apiName>
         <shortdesc>The default skin class for the Spark VideoPlayer component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark VideoPlayer component.  
     </apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomButtonSkin">
         <apiName>CustomButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
</apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomStartButtonSkin">
         <apiName>CustomStartButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
</apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin">
         <apiName>CustomDimesionButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
</apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomRadioSkin">
         <apiName>CustomRadioSkin</apiName>
         <shortdesc>The default skin class for a Spark RadioButton component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for a Spark RadioButton component.  
       </apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomBackButtonSkin">
         <apiName>CustomBackButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
</apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomEyeButtonSkin">
         <apiName>CustomEyeButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
       </apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomLoginPanelSkin">
         <apiName>CustomLoginPanelSkin</apiName>
         <shortdesc>The default skin class for a Spark Panel container.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for a Spark Panel container.  
    </apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomTextInputSkin">
         <apiName>CustomTextInputSkin</apiName>
         <shortdesc>The default skin class for Spark TextInput component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for Spark TextInput component.  
     </apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:SoundButtonSkin">
         <apiName>SoundButtonSkin</apiName>
         <shortdesc>The default skin class for the Spark Button component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for the Spark Button component.  
       </apiDesc>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.CustomSkins:CustomLoginInputSkin">
         <apiName>CustomLoginInputSkin</apiName>
         <shortdesc>The default skin class for Spark TextInput component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>The default skin class for Spark TextInput component.  
     </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="DisplayApplication.ItemView">
      <apiName>DisplayApplication.ItemView</apiName>
      <apiClassifier id="DisplayApplication.ItemView:InstructionField">
         <apiName>InstructionField</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.ItemView:reaBtnNext">
         <apiName>reaBtnNext</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Button</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.ItemView:reaSoundImg">
         <apiName>reaSoundImg</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>mx.controls:Image</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.ItemView:reaPanelCom">
         <apiName>reaPanelCom</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Panel</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication.ItemView:reaBackimg">
         <apiName>reaBackimg</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>mx.controls:Image</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="DisplayApplication">
      <apiName>DisplayApplication</apiName>
      <apiClassifier id="DisplayApplication:LogInView">
         <apiName>LogInView</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication:StartAppView">
         <apiName>StartAppView</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication:ErrorView">
         <apiName>ErrorView</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication:DisplayWrapper">
         <apiName>DisplayWrapper</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication:Overview">
         <apiName>Overview</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication:QuestionView">
         <apiName>QuestionView</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication:ItemViewContainer">
         <apiName>ItemViewContainer</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
      <apiClassifier id="DisplayApplication:TestFinishedView">
         <apiName>TestFinishedView</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface>
               <apiBaseInterface>mx.core:IStateClient2</apiBaseInterface>
               <apiBaseClassifier>spark.components:Group</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="Interfaces">
      <apiName>Interfaces</apiName>
      <apiClassifier id="Interfaces:ICustomModule">
         <apiName>ICustomModule</apiName>
         <shortdesc>
	 Defines the minimal criteria for a class to be a module.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Defines the minimal criteria for a class to be a module. This makes it possible for the MainAppManager to load any Module with the same abstract sequence of instructions.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Interfaces:IClickableComponent">
         <apiName>IClickableComponent</apiName>
         <shortdesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.core:IButton</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.
	 
	 <p>There are many different Types of buttons in this application, many of them have refer to a sound and therefore we need to generalize the 
	 properties of a button which makes ist possible to play a sound by clickign itr dragging it</p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="Interfaces:ICustomEventDispatcher">
         <apiName>ICustomEventDispatcher</apiName>
         <shortdesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 removeAllEventListeners function.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 <codeph>removeAllEventListeners</codeph> function.
	 
	 <p>It is required to extends Shared.EventDispatcher to implement this interface</p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="Interfaces:ICustomSelectable">
         <apiName>ICustomSelectable</apiName>
         <shortdesc>
	 This interface is for accessing information of any selectable component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface is for accessing information of any selectable component. These components are generally used within questions. It allows the program to iterate the references and look for already selected Objects.
	 Instead of overwriting the synchronize() function in each new question class, you just have to assure it implements this interface.
	 
	 <p>By using this, it is possible to implement a radio button or check box behavior for an image or other visual components, without extending these classes</p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="Interfaces:ICustomWritable">
         <apiName>ICustomWritable</apiName>
         <shortdesc>
	 Adds the textvalue to a component.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Adds the textvalue to a component. Makes possible to implement writable components and access them runtime via arrays or lists or other runtime build references.
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="ItemApplication.QuestionTypes">
      <apiName>ItemApplication.QuestionTypes</apiName>
      <apiClassifier id="ItemApplication.QuestionTypes:SelectAndWrite">
         <apiName>SelectAndWrite</apiName>
         <shortdesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="ItemApplication.QuestionTypes:ScCloud">
         <apiName>ScCloud</apiName>
         <shortdesc>
	 Provides a cloud of radiobuttons and labels to click.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>ItemApplication.QuestionTypes:SingleChoice</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Provides a cloud of radiobuttons and labels to click. The positions within the cloud will be chosen randomly and the cloud can increase its size by having trouble with positioning elements due to limited space.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="ItemApplication.QuestionTypes:SingleChoice">
         <apiName>SingleChoice</apiName>
         <shortdesc>
	 Representing the process of loading, arranging and displaying data within a single choice item.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Representing the process of loading, arranging and displaying data within a single choice item. The data model is a radiobutton group, whcih allows only one choice per question.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="ItemApplication.QuestionTypes:QuestionsObject">
         <apiName>QuestionsObject</apiName>
         <shortdesc>
	 Defines the basic structure and bahvior of a question object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Defines the basic structure and bahvior of a question object. The detailed behavior like load and display data is defined in each of the extending quesion classes.
	 
	 <p>A special feature is the load content by page behavior. All Data will be loaded immediately after calling the specific questionspage and will be unloaded
	 by calling another questionpage. This frees memory and enables a fluid application.</p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="ItemApplication.QuestionTypes:Cloze">
         <apiName>Cloze</apiName>
         <shortdesc>
	 Representing the loading, arranging and displaying data for a cloze text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Representing the loading, arranging and displaying data for a cloze text.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="ItemApplication.QuestionTypes:MultipleChoice">
         <apiName>MultipleChoice</apiName>
         <shortdesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item. The data model is a checkbox group, which allows one or many or all selected choices as an answer.
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="ItemApplication">
      <apiName>ItemApplication</apiName>
      <apiClassifier id="ItemApplication:ItemEvent">
         <apiName>ItemEvent</apiName>
         <shortdesc>
	 Defines a set of events realted to the item object and its children.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Defines a set of events realted to the item object and its children. Also stores the result xml of the actual item, in order to pass it to other handlers.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="ItemApplication:ItemObject">
         <apiName>ItemObject</apiName>
         <shortdesc>
	 Represents a handler for all item releated actions.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Represents a handler for all item releated actions.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="ItemApplication:xmlLoader">
         <apiName>xmlLoader</apiName>
         <shortdesc>
	 XML Loader Class
	 
	 Version: 	0.1.6
	 DOC: 		02.11.2010
	 Author: 	Jan Küster
	 
	 Last Update: 09.11.2010
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 XML Loader Class
	 
	 Version: 	0.1.6
	 DOC: 		02.11.2010
	 Author: 	Jan Küster
	 
	 Last Update: 09.11.2010
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="MainApplication">
      <apiName>MainApplication</apiName>
      <apiClassifier id="MainApplication:OverviewObject">
         <apiName>OverviewObject</apiName>
         <shortdesc>
	 the handler class for an overview, where users will choose their next testcollection by choosing a dimension and the corresponding level.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 the handler class for an overview, where users will choose their next testcollection by choosing a dimension and the corresponding level.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="MainApplication:StartAppObject">
         <apiName>StartAppObject</apiName>
         <shortdesc>
	 First module, loaded after initialization of the application.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	           <p>First module, loaded after initialization of the application. Includes a VideoPlayer for introducing the applications funcionalities.</p> 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="MainApplication:MainAppManager">
         <apiName>MainAppManager</apiName>
         <shortdesc>
	 The core controller class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The core controller class.
	 Manages the loading and unloading of the modules as well as the communication between them and the model related data.
	 Modules a loaded by name, their functions are accessed via <codeph>ICustomModule</codeph> interface.
	 The view component of the modules get connected with the <codeph>DisplayManager</codeph>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="MainApplication:TestFinishedObject">
         <apiName>TestFinishedObject</apiName>
         <shortdesc>
	 After finishing a test, this Class is loaded to provide functions for printing the evaluation and choosing the further activities.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 After finishing a test, this Class is loaded to provide functions for printing the evaluation and choosing the further activities.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="MainApplication:DisplayManager">
         <apiName>DisplayManager</apiName>
         <shortdesc>
	 The DisplayManager is one of the core classes to provide a management all visual components.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:BorderContainer</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DisplayManager is one of the core classes to provide a management all visual components.
	 This allows the <codeph>MainAppmanager</codeph> to include or remove specific view components of a module.
	 
	 </apiDesc>
         <adobeApiEvent id="MainApplication:DisplayManager:DISPLAY_TWEENEDOUT_flash.events.Event">
            <apiName>flash.events.Event</apiName>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>MainApplication:DisplayManager:DISPLAY_TWEENEDOUT</apiEventType>
                  <adobeApiEventClassifier>MainApplication:DisplayManager</adobeApiEventClassifier>
                  <apiDefinedEvent/>
               </adobeApiEventDef>
            </adobeApiEventDetail>
            <related-links>
               <link href="" invalidHref="MainApplication.layer.xml">
                  <linktext>layer</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="MainApplication:LoginObject">
         <apiName>LoginObject</apiName>
         <shortdesc>
	 Represents a login form handler.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Represents a login form handler. User input will be sent to the server, server evaluates and answers with a value. The value influences the state of the handler and
	 either a login is performed or fault or a new user code is requestet.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="MainApplication:LoaderManagement">
         <apiName>LoaderManagement</apiName>
         <shortdesc>
	 A static class, representing a sequence to arrange the required modules in a predefined order.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A static class, representing a sequence to arrange the required modules in a predefined order.
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="Model">
      <apiName>Model</apiName>
      <apiClassifier id="Model:Collection">
         <apiName>Collection</apiName>
         <shortdesc>
	 A class representing one testcollection of a dimension / subject.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A class representing one testcollection of a dimension / subject. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Model:Session">
         <apiName>Session</apiName>
         <shortdesc>
	 This is a Data Structure, where each session for one item is stored.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This is a Data Structure, where each session for one item is stored. In detail, it stores the slected dimension, level and item. This ensures, that application always knows, where the user is at the moment.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Model:TestCollection">
         <apiName>TestCollection</apiName>
         <shortdesc>
	 This class loads the xml with the contained information about subjects, levels and item IDs and parse it into an XMLLIST.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This class loads the xml with the contained information about subjects, levels and item IDs and parse it into an XMLLIST. 
	 <p>The data is read-only and will be written only once when the class will be initialized</p>
	           <p>To overwirte the data, the class must be unloaded and be instanciated again</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="Model:UserObject">
         <apiName>UserObject</apiName>
         <shortdesc>
	 This class represents the login session of a certain user.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This class represents the login session of a certain user. The information are stored temporarily and usually written in an xml file which will be permanently send to the server.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Model:Dimension">
         <apiName>Dimension</apiName>
         <shortdesc>
	 This class represents a dimension or subject with all its included data.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This class represents a dimension or subject with all its included data.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Model:Globals">
         <apiName>Globals</apiName>
         <shortdesc>
	 This class is a model for all global settings like paths and labels.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This class is a model for all global settings like paths and labels.
	 
	 <p>The globals.xml file will be analysed and the particular data will be stored in different arrays</p>
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="Shared">
      <apiName>Shared</apiName>
      <apiClassifier id="Shared:UserEvent">
         <apiName>UserEvent</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="Shared:XMLWriter">
         <apiName>XMLWriter</apiName>
         <shortdesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:MP3Audio">
         <apiName>MP3Audio</apiName>
         <shortdesc>
	 Creates a new wrapper for loaded mp3 files.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Creates a new wrapper for loaded mp3 files. Can handle all required events for a common mp3 player like play, pause, stop etc. The underlying data structure is a Sound Object.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:ErrorDispatcher">
         <apiName>ErrorDispatcher</apiName>
         <shortdesc>
	 Static class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Static class. Prepares a custom error type to be send to server which writes an error log
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:HorizontalMultilineLayout">
         <apiName>HorizontalMultilineLayout</apiName>
         <shortdesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.
	 
	 copyright: Maxim Kachurovskiy
	 http://cookbooks.adobe.com/post_Horizontal_Multiline_Layout-17807.html
	 
	 Code is modified by Jan Kuester, University of bremen jank87</apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:CustomImage">
         <apiName>CustomImage</apiName>
         <shortdesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>mx.controls:Image</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners. Be aware, that it requires the data as a base64 string.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:CustomButton">
         <apiName>CustomButton</apiName>
         <shortdesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseInterface>Interfaces:IClickableComponent</apiBaseInterface>
               <apiBaseClassifier>spark.components:Button</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.
	 <p>Most buttons in this Application will extend this</p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:StaticFunctions">
         <apiName>StaticFunctions</apiName>
         <shortdesc>
	 This Class contains a set of static functions which will be called by any class in the project.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This Class contains a set of static functions which will be called by any class in the project.
	 Its a kind of collection of generic functions. 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:StaticMath">
         <apiName>StaticMath</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="Shared:MyBase64Decoder">
         <apiName>MyBase64Decoder</apiName>
         <shortdesc>
	 A utility class to decode a Base64 encoded String to a ByteArray.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A utility class to decode a Base64 encoded String to a ByteArray. Extends Shared.EventDispatcher to dispatch and remove events dynamically
	 
	  
	  </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:ItemEvent">
         <apiName>ItemEvent</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="Shared:CustomModuleEvents">
         <apiName>CustomModuleEvents</apiName>
         <shortdesc>
	 An event class for passing session related values via event.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An event class for passing session related values via event. Especially useful if you want to avoid to code this into an interface (and therefore into all other module classes).
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:EventDispatcher">
         <apiName>EventDispatcher</apiName>
         <shortdesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.
	 Idea and concept by Justin Shacklette, Copyright holds Justin Shacklette www.saturnboy.com
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="Shared:XLoader">
         <apiName>XLoader</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="__Global__">
      <apiName>__Global__</apiName>
      <apiClassifier id="globalClassifier:_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory">
         <apiName>_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface>
               <apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface>
               <apiBaseClassifier>flash.display:Sprite</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="globalClassifier:xmlTest">
         <apiName>xmlTest</apiName>
         <shortdesc/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>spark.components:Application</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc/>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="enumTypes">
      <apiName>enumTypes</apiName>
      <apiClassifier id="enumTypes:ErrorTypeEnum">
         <apiName>ErrorTypeEnum</apiName>
         <shortdesc>
	 Enumeration of error types to indicate the number and the type of the error.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Enumeration of error types to indicate the number and the type of the error.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="enumTypes:PHPParameterTypeEnum">
         <apiName>PHPParameterTypeEnum</apiName>
         <shortdesc>
	 Collection of enumeration ids, to access php parameters.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Collection of enumeration ids, to access php parameters. They are hardcoded, so changes in this file will require changes in the include php file and vice versa.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="enumTypes:UrlTypeEnum">
         <apiName>UrlTypeEnum</apiName>
         <shortdesc>
	 Collection of enumeration ids, to access globals parameters.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Collection of enumeration ids, to access globals parameters. They are hardcoded, so changes in this file will require changes in the globals file and vice versa.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="enumTypes:BasicEnumeration">
         <apiName>BasicEnumeration</apiName>
         <shortdesc>
	 Basic grid of an enumeration.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Basic grid of an enumeration.
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
</allClasses>