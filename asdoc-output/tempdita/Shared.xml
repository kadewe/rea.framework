<?xml version="1.0" encoding="UTF-8"?><apiPackage id="Shared"><apiName>Shared</apiName><apiDetail/><apiClassifier id="Shared:UserEvent"><apiName>UserEvent</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:UserEvent:UserEvent"><apiName>UserEvent</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>_subject</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_level</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_user</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="Shared:UserEvent:clone"><apiName>clone</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.events:Event"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:UserEvent:ENDTEST_CHOSEN"><apiName>ENDTEST_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>endTestChosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:NEWTEST_CHOSEN"><apiName>NEWTEST_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>newTestChosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:START_APPLICATION"><apiName>START_APPLICATION</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startApplication</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:SUBJ_AND_LEVEL_CHOSEN"><apiName>SUBJ_AND_LEVEL_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subjandlevelchosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:USERDATA_RECEIVED"><apiName>USERDATA_RECEIVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userDataReceived</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_level:get"><apiName>_level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_subject:get"><apiName>_subject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_userData:get"><apiName>_userData</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:XMLWriter"><apiName>XMLWriter</apiName><shortdesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:XMLWriter:XMLWriter"><apiName>XMLWriter</apiName><shortdesc>
		 Constructor with presettings of parameters.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_relUrl</apiItemName><apiType value="String"/><apiDesc>The complete item XML File (required, cannot be null)
		 </apiDesc></apiParam><apiParam><apiItemName>_xml</apiItemName><apiType value="XML"/><apiDesc>The timestamp, given by the itemObject 
		 </apiDesc></apiParam><apiParam><apiItemName>_date</apiItemName><apiType value="String"/><apiData/><apiDesc>the complete Document name to be written 
		 </apiDesc></apiParam><apiParam><apiItemName>_name</apiItemName><apiType value="String"/><apiData/><apiDesc>the user name / iD (default ID is test)
		 </apiDesc></apiParam><apiParam><apiItemName>_user</apiItemName><apiType value="String"/><apiData>test</apiData><apiDesc>there are different types of php scripts, whhich can be requested, the parameter indicates which specific script will be called.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>_param</apiItemName><apiType value="Number"/><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor with presettings of parameters. The parameters representing the values which are required to make PHP write a new XML document with the correct information.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:XMLWriter:send_httpReq"><apiName>send_httpReq</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:XMLWriter:send_urlReq"><apiName>send_urlReq</apiName><shortdesc>
		 In this method, a variables object willl be created to store all data in one object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 In this method, a variables object willl be created to store all data in one object. In php you will be able to refer to it, by 
		 accessing the <codeph>§_POST['variables.something']</codeph> array. Depending on the param variable, different scripts will be loaded.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:MP3Audio"><apiName>MP3Audio</apiName><shortdesc>
	 Creates a new wrapper for loaded mp3 files.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Creates a new wrapper for loaded mp3 files. Can handle all required events for a common mp3 player like play, pause, stop etc. The underlying data structure is a Sound Object.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.media.Sound.xml"><linktext>flash.media.Sound</linktext></link><link href="" invalidHref="flash.media.SoundChannel.xml"><linktext>flash.media.SoundChannel</linktext></link></related-links><apiConstructor id="Shared:MP3Audio:MP3Audio"><apiName>MP3Audio</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_scriptUrl</apiItemName><apiType value="String"/><apiDesc>the path to the include script on the server
		 </apiDesc></apiParam><apiParam><apiItemName>relPath</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	the relative path to the mp3 object
		 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>		allows to set an id for accessing objects at runtime
		 </apiDesc></apiParam><apiParam><apiItemName>navigate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>for debug purposes, navigates to url of the include script
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor. Requires an url to load an mp3 from an external source. events will be auto-build.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:MP3Audio:pause"><apiName>pause</apiName><shortdesc>
		 manually pauses the sound object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 manually pauses the sound object.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:playAudio"><apiName>playAudio</apiName><shortdesc>
		 opens the soundchannel and adds the playing soundobject to it.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 opens the soundchannel and adds the playing soundobject to it. enabled to autodetect, when the soundobject finished playing. isPlaying will be set to true.
		 Does nothing if the sound object is null. This can happen for example if the unload method was called external or internal when an error occured.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#MP3Audio/returnIsPlaying()"><linktext>returnIsPlaying()</linktext></link></related-links></apiOperation><apiOperation id="Shared:MP3Audio:returnIsPlaying"><apiName>returnIsPlaying</apiName><shortdesc>
		 return if the underlying sound object is in playing state
		 
		 </shortdesc><prolog><asCustoms><returns>Boolean isPlaying true if playing false if not
		 </returns></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 return if the underlying sound object is in playing state
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:returnProgress"><apiName>returnProgress</apiName><shortdesc>
		 returns a progress value for external objects to access the loading state of the sound object
		 
		 </shortdesc><prolog><asCustoms><returns>Number a percent value as a number
		 </returns></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
		 returns a progress value for external objects to access the loading state of the sound object
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:setDebug"><apiName>setDebug</apiName><shortdesc>
		 lets an external class set this state to debugMode, allows to show alert boxes on screen
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 lets an external class set this state to debugMode, allows to show alert boxes on screen
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:stop"><apiName>stop</apiName><shortdesc>
		 stops a sound.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 stops a sound.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:unload"><apiName>unload</apiName><shortdesc>
		 unloads soundObject related events and the object itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 unloads soundObject related events and the object itself.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Shared:MP3Audio:FINISHED_PLAYING"><apiName>FINISHED_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>finishedPLaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:INIT_COMPLETE"><apiName>INIT_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>initComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:ONLOAD_ERROR"><apiName>ONLOAD_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>onLoadError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:PAUSE_PLAYING"><apiName>PAUSE_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pausePlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:START_PLAYING"><apiName>START_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startPlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:STOPPED_PLAYING"><apiName>STOPPED_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stoppedPlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:id"><apiName>id</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:parent"><apiName>parent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:ErrorDispatcher"><apiName>ErrorDispatcher</apiName><shortdesc>
	 Static class.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Static class. Prepares a custom error type to be send to server which writes an error log
	 </apiDesc></apiClassifierDetail><apiOperation id="Shared:ErrorDispatcher:processNewError"><apiName>processNewError</apiName><shortdesc>
		 creates an sends a new error message by combining the parameters and adding a timestamp.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>error</apiItemName><apiType value="String"/><apiDesc>custom number of error type
		 </apiDesc></apiParam><apiParam><apiItemName>description</apiItemName><apiType value="String"/><apiDesc>custom description of error type
		 </apiDesc></apiParam><apiParam><apiItemName>flashErrorId</apiItemName><apiType value="String"/><apiDesc>original falsh error id
		 </apiDesc></apiParam><apiParam><apiItemName>causedBy</apiItemName><apiType value="String"/><apiDesc>the source of the error
		 </apiDesc></apiParam><apiParam><apiItemName>line</apiItemName><apiType value="String"/><apiDesc>the module and if important also the line (line is usually useless, due to continual development)
		 </apiDesc></apiParam><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/><apiDesc>the url to the php script
		 </apiDesc></apiParam><apiParam><apiItemName>navigate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>for debugging, shows the target url
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 creates an sends a new error message by combining the parameters and adding a timestamp. Then a urlloader will be created to request the specific php script which will write the message into a log file.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:HorizontalMultilineLayout"><apiName>HorizontalMultilineLayout</apiName><shortdesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.</shortdesc><prolog><asMetadata/><asCustoms><tzi.de>
	 Modification: Layout-in-Row --> Text can be aligned into middle, top or bottom align in each line,
	 Text can be aligned by the measurements of a source element (e.g. an image) in each line, Text can be aligned by a fixed
	 pixel value in each line. 
	 </tzi.de></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.
	 
	 copyright: Maxim Kachurovskiy
	 http://cookbooks.adobe.com/post_Horizontal_Multiline_Layout-17807.html
	 
	 Code is modified by Jan Kuester, University of bremen jank87</apiDesc></apiClassifierDetail><apiOperation id="Shared:HorizontalMultilineLayout:measure"><apiName>measure</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:HorizontalMultilineLayout:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:HorizontalMultilineLayout:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:lineHeightInPixel:get"><apiName>lineHeightInPixel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:lineHeightSource:get"><apiName>lineHeightSource</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:ILayoutElement"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingRight:get"><apiName>paddingRight</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingTop:get"><apiName>paddingTop</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalGap:get"><apiName>verticalGap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalLayoutInLine:get"><apiName>verticalLayoutInLine</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomImage"><apiName>CustomImage</apiName><shortdesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>mx.controls:Image</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners. Be aware, that it requires the data as a base64 string.
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:CustomImage:CustomImage"><apiName>CustomImage</apiName><shortdesc>
 			Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/><apiDesc>the url to the script which loads the image
		 </apiDesc></apiParam><apiParam><apiItemName>relPath</apiItemName><apiType value="String"/><apiDesc>	the path parameter passed to the url via POST
		 </apiDesc></apiParam><apiParam><apiItemName>navigate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>for debugging purposes, navigates to the url of the script
 		</apiDesc></apiParam></apiConstructorDef><apiDesc>
 			Constructor. Requires an url and a relative path to the image file. Will automatically loads the image as a base64 string and decodes it to an image source.
		
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:CustomImage:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:hasAtLeastOneListener"><apiName>hasAtLeastOneListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:setDebug"><apiName>setDebug</apiName><shortdesc>
		 sets the debug value to the desired value true or fals
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>the new value for the components debugmode
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 sets the debug value to the desired value true or fals
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Shared:CustomImage:CREATION_COMPLETE"><apiName>CREATION_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationcomplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomButton"><apiName>CustomButton</apiName><shortdesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.</shortdesc><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseInterface>Interfaces:IClickableComponent</apiBaseInterface><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.
	 <p>Most buttons in this Application will extend this</p>
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:CustomButton:CustomButton"><apiName>CustomButton</apiName><shortdesc>
		 empty constructor
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 empty constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:CustomButton:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomButton:hasAtLeastOneListener"><apiName>hasAtLeastOneListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomButton:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomButton:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiValue id="Shared:CustomButton:referringTo:get"><apiName>referringTo</apiName><shortdesc>
		 get the reference to the linked object
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 get the reference to the linked object
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:CustomButton:visibleReference:get"><apiName>visibleReference</apiName><shortdesc>
		 gets a reference to a linked visible object
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 gets a reference to a linked visible object
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:StaticFunctions"><apiName>StaticFunctions</apiName><shortdesc>
	 This Class contains a set of static functions which will be called by any class in the project.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This Class contains a set of static functions which will be called by any class in the project.
	 Its a kind of collection of generic functions. 
	 </apiDesc></apiClassifierDetail><apiOperation id="Shared:StaticFunctions:check_exists"><apiName>check_exists</apiName><shortdesc>
		 Function for Debugging
		 
		 </shortdesc><prolog><asCustoms><returns>A boolean value <code>true</code> if object exists.
		 </returns></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Object"/><apiDesc>Can be any object, class whatever, important: Classpath needed!
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Function for Debugging
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:convertToString"><apiName>convertToString</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:fadeOutSound"><apiName>fadeOutSound</apiName><shortdesc>
		 Provides a smooth fade out for all now-running sound files.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Provides a smooth fade out for all now-running sound files.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:getDropSh"><apiName>getDropSh</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.filters:DropShadowFilter"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:getGloFil"><apiName>getGloFil</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.filters:GlowFilter"/></apiReturn><apiParam><apiItemName>_color</apiItemName><apiType value="uint"/><apiData>0xFFD799</apiData></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiData>10</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:makeVisible"><apiName>makeVisible</apiName><shortdesc>
		 Can make display components visible or invisible.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_id</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
		 Can make display components visible or invisible.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:pulseFocus"><apiName>pulseFocus</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:removeStringTabs"><apiName>removeStringTabs</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>input</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:resize"><apiName>resize</apiName><shortdesc>
		 Provides a tween animation for resizing Display Objects.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>arr</apiItemName><apiType value="Array"/><apiDesc>The object which needs to be resized. (important: obj must be a view component)
		 </apiDesc></apiParam><apiParam><apiItemName>targetWidth</apiItemName><apiType value="Number"/><apiDesc>The desired width of the object
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData>smaller</apiData><apiDesc>Describes in which way the object will be resized. Options: smaller bigger mirror smallerToZero
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Provides a tween animation for resizing Display Objects.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:stopPulse"><apiName>stopPulse</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:tweenAlpha"><apiName>tweenAlpha</apiName><shortdesc>
		 This animation tween is used to fade in and out but will only work on components wihtout children whose alpha value is used between 0 and 1.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>The Object which will be faded. Important is, that you only use Display Objects ().
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData>out</apiData><apiDesc>the type of the tween animation 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This animation tween is used to fade in and out but will only work on components wihtout children whose alpha value is used between 0 and 1.
		 This would cause that those values will be manipulated as well! The components will loose their smooth gradient fashioned look. So be careful if you use this method.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:xtrace"><apiName>xtrace</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>txt</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>col</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:StaticFunctions:OBJECT_FADE_IN"><apiName>OBJECT_FADE_IN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectFadeIn</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:OBJECT_FADE_OUT"><apiName>OBJECT_FADE_OUT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectFadeOut</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:OBJECT_RESIZED"><apiName>OBJECT_RESIZED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectResized</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:alpha"><apiName>alpha</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:sizeX"><apiName>sizeX</apiName><shortdesc>
		 for resizeX method
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 for resizeX method
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:staticDispatcher"><apiName>staticDispatcher</apiName><shortdesc>
		 Allows a static class to dispatch Events dynamically.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>Shared:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
		 Allows a static class to dispatch Events dynamically.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:targets"><apiName>targets</apiName><shortdesc>
		 Pointer on multiple Object to use within a method of this class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Pointer on multiple Object to use within a method of this class. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:target"><apiName>target</apiName><shortdesc>
		 Pointer on a single Object to use within multple methods (especially event driven methods).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
		 Pointer on a single Object to use within multple methods (especially event driven methods).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:tweenObj"><apiName>tweenObj</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:StaticMath"><apiName>StaticMath</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:StaticMath:StaticMath"><apiName>StaticMath</apiName><shortdesc>
		 A collection of static functions, calculating things you might need somewhere.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 A collection of static functions, calculating things you might need somewhere.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:StaticMath:getRandomSquarePosition"><apiName>getRandomSquarePosition</apiName><shortdesc>
		 This is a full working shuffle function.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>the width of the current element, which will be compared with the others
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>the height of the current element, which will be compared with the others
		 </apiDesc></apiParam><apiParam><apiItemName>boundx</apiItemName><apiType value="Number"/><apiDesc>the maxwidth of the elements target container
		 </apiDesc></apiParam><apiParam><apiItemName>boundy</apiItemName><apiType value="Number"/><apiDesc>the maxheight of the elements targetcontainer
		 </apiDesc></apiParam><apiParam><apiItemName>compare</apiItemName><apiType value="Array"/><apiDesc>the array of all elements to compare with
		 </apiDesc></apiParam><apiParam><apiItemName>maxIndex</apiItemName><apiType value="uint"/><apiDesc>the maximum amount of steps in the compare loop. assume there are only a few elements with a position set before, so the loop breaks at those who still have not obtained a position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This is a full working shuffle function. It auto-increases the y-bounds, if there is no more possible placement of an element. The max effort is n, before the bounds will increase.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticMath:square2squareHit"><apiName>square2squareHit</apiName><shortdesc>
		 Square to Square hit test working by exclusion, which is more performant for the case, that usually there would be no collision.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>x2</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y2</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>width2</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height2</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 Square to Square hit test working by exclusion, which is more performant for the case, that usually there would be no collision.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:MyBase64Decoder"><apiName>MyBase64Decoder</apiName><shortdesc>
	 A utility class to decode a Base64 encoded String to a ByteArray.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to decode a Base64 encoded String to a ByteArray. Extends Shared.EventDispatcher to dispatch and remove events dynamically
	 
	  
	  </apiDesc></apiClassifierDetail><apiConstructor id="Shared:MyBase64Decoder:MyBase64Decoder"><apiName>MyBase64Decoder</apiName><shortdesc>
		 Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor.
		  
		  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:MyBase64Decoder:decode"><apiName>decode</apiName><shortdesc>
		 Decodes a Base64 encoded String and adds the result to an internal
		 buffer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>encoded</apiItemName><apiType value="String"/><apiDesc>The Base64 encoded String to decode.
		  
		  </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Decodes a Base64 encoded String and adds the result to an internal
		 buffer. Subsequent calls to this method add on to the internal
		 buffer. After all data have been encoded, call <codeph>toByteArray()</codeph>
		 to obtain a decoded <codeph>flash.utils.ByteArray</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MyBase64Decoder:reset"><apiName>reset</apiName><shortdesc>
		 Clears all buffers and resets the decoder to its initial state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Clears all buffers and resets the decoder to its initial state.
		  
		  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MyBase64Decoder:toByteArray"><apiName>toByteArray</apiName><shortdesc>
		 Returns the current buffer as a decoded flash.utils.ByteArray.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The decoded <codeph>flash.utils.ByteArray</codeph>.
		  
		  </apiDesc><apiType value="flash.utils:ByteArray"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the current buffer as a decoded <codeph>flash.utils.ByteArray</codeph>.
		 Note that calling this method also clears the buffer and resets the 
		 decoder to its initial state.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Shared:MyBase64Decoder:BYTES_CONVERTED"><apiName>BYTES_CONVERTED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bytesConverted</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:ItemEvent"><apiName>ItemEvent</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:ItemEvent:ItemEvent"><apiName>ItemEvent</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>_current</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_next</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_time</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="Shared:ItemEvent:clone"><apiName>clone</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.events:Event"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:ItemEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:ITEM_PLUS"><apiName>ITEM_PLUS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemPlus</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:QPAGE_BACK"><apiName>QPAGE_BACK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageBack</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:QPAGE_FORWARD"><apiName>QPAGE_FORWARD</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageForward</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:START_ITEM"><apiName>START_ITEM</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startItem</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:WRITE_DATA"><apiName>WRITE_DATA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>writeData</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:currentItem"><apiName>currentItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:nextItem"><apiName>nextItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:timeStamp"><apiName>timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_currentItem:get"><apiName>_currentItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_nextitem:get"><apiName>_nextitem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_timeStamp:get"><apiName>_timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomModuleEvents"><apiName>CustomModuleEvents</apiName><shortdesc>
	 An event class for passing session related values via event.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An event class for passing session related values via event. Especially useful if you want to avoid to code this into an interface (and therefore into all other module classes).
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:CustomModuleEvents:CustomModuleEvents"><apiName>CustomModuleEvents</apiName><shortdesc>
		 Constructor, calls superclass and passes parameters.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>the passed user id
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiDesc>	the id of the actual item, used to determine the successor item
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiDesc>	the timestamp needed for writing the files on the server in order to the actual time
		 </apiDesc></apiParam><apiParam><apiItemName>_userDataUrl</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>		the chosen level of the testcollection
		 </apiDesc></apiParam><apiParam><apiItemName>_itemString</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	the chosen dimension of the testcollection
		 </apiDesc></apiParam><apiParam><apiItemName>_timeStamp</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	determines if the following module is an item, if <codeph>true</codeph>, the next module should be an item AND the item id to load will be dtermined by <codeph>_itemString</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>_level</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>	contains the updated item xml (after an item was completed). ready to be sent to the server
		 </apiDesc></apiParam><apiParam><apiItemName>_dimension</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>_isNext</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>updated</apiItemName><apiType value="XML"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor, calls superclass and passes parameters.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:CustomModuleEvents:clone"><apiName>clone</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.events:Event"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:CustomModuleEvents:MODULE_FINISHED"><apiName>MODULE_FINISHED</apiName><shortdesc>
		 Declares the state of being ready to unload.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moduleFinished</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Declares the state of being ready to unload. Related to any module.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_dimension:get"><apiName>_dimension</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_isNext:get"><apiName>_isNext</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_itemString:get"><apiName>_itemString</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_level:get"><apiName>_level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_timeStamp:get"><apiName>_timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_updatedXML:get"><apiName>_updatedXML</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_userDataUrl:get"><apiName>_userDataUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.
	 Idea and concept by Justin Shacklette, Copyright holds Justin Shacklette www.saturnboy.com
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="Shared:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:EventDispatcher:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:XLoader"><apiName>XLoader</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:XLoader:XLoader"><apiName>XLoader</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_url</apiItemName><apiType value="String"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="Shared:XLoader:service"><apiName>service</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="mx.rpc.http:HTTPService"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:XLoader:result:get"><apiName>result</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>