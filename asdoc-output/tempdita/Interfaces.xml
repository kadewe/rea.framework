<?xml version="1.0" encoding="UTF-8"?><apiPackage id="Interfaces"><apiName>Interfaces</apiName><apiDetail/><apiClassifier id="Interfaces:ICustomModule"><apiName>ICustomModule</apiName><shortdesc>
	 Defines the minimal criteria for a class to be a module.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Defines the minimal criteria for a class to be a module. This makes it possible for the MainAppManager to load any Module with the same abstract sequence of instructions.
	 </apiDesc></apiClassifierDetail><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:getClassDefinition"><apiName>getClassDefinition</apiName><shortdesc>
		 Returns a String of the module class plus the package name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a String of the module class plus the package name. Ensure to change their names, when refactor.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:load"><apiName>load</apiName><shortdesc>
		 Loading the module.
		 
		 Connect the modules internal variables with data from GlobalSettings, TestCollections and Session.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_globals</apiItemName><apiOperationClassifier>Model:Globals</apiOperationClassifier></apiParam><apiParam><apiItemName>_tcollection</apiItemName><apiOperationClassifier>Model:TestCollection</apiOperationClassifier></apiParam><apiParam><apiItemName>_session</apiItemName><apiOperationClassifier>Model:Session</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 <p>Loading the module.</p>
		 <p>
		 Connect the modules internal variables with data from GlobalSettings, TestCollections and Session.
		 Usually there are only some of them needed, so not all the modules will behave like in the following description.
		 </p>
		 
		 <p>loads debug states, url paths to data on the server, and text for labels from globalsettings</p>
		 <p>loads the collection of possible dimensions, levels and the associated items as Strings</p>
		 <p>loads actual session states. These can include actual dimension, actual level and actual item.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:returnLoadFinishedEvent"><apiName>returnLoadFinishedEvent</apiName><shortdesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable addEventListener(anyModuleInstance.returnLoadFinishedEvent())
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable <codeph>addEventListener(anyModuleInstance.returnLoadFinishedEvent())</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:returnModuleFinishedEvent"><apiName>returnModuleFinishedEvent</apiName><shortdesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable addEventListener(anyModuleInstance.returnModuleFinishedEvent())
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable <codeph>addEventListener(anyModuleInstance.returnModuleFinishedEvent())</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:returnView"><apiName>returnView</apiName><shortdesc>
		 To access the private view component only via referencs, instead of direct access.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
		 To access the private view component only via referencs, instead of direct access.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:sendTweenFinished"><apiName>sendTweenFinished</apiName><shortdesc>
		 Tells the module, that the screen is visible and specific actions can be performed now.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Tells the module, that the screen is visible and specific actions can be performed now.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:unload"><apiName>unload</apiName><shortdesc>
		 Unloads all contained and related objects of a module.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <p>Unloads all contained and related objects of a module. Removes all event listeners if possible and sets all objects and relations to null.</p>
		 <p>Therefore all related objects of a module should be stored in an array calles references.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Interfaces:ICustomModule:Interfaces:ICustomModule:debug:set"><apiName>debug</apiName><shortdesc>
		 Set the Debugging state to true.
		 Enables to determine errors without sourcecode by showing alertboxes, if an error occurs
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 <p>Set the Debugging state to <codeph>true</codeph>.</p>
		 <p>Enables to determine errors without sourcecode by showing alertboxes, if an error occurs</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Interfaces:ICustomModule:Interfaces:ICustomModule:soundMode:set"><apiName>soundMode</apiName><shortdesc>
		 Sets sound to on or off
		 Enables to use application without sound errors, ideal for rapid item development and debug
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 <p>Sets sound to on or off</p>
		 <p>Enables to use application without sound errors, ideal for rapid item development and debug</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:IClickableComponent"><apiName>IClickableComponent</apiName><shortdesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.
	 
	 <p>There are many different Types of buttons in this application, many of them have refer to a sound and therefore we need to generalize the 
	 properties of a button which makes ist possible to play a sound by clickign itr dragging it</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:IClickableComponent:Interfaces:IClickableComponent:referringTo:get"><apiName>referringTo</apiName><shortdesc>
		 Get the reference to a specific sound object.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Get the reference to a specific sound object.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Interfaces:IClickableComponent:Interfaces:IClickableComponent:visibleReference:get"><apiName>visibleReference</apiName><shortdesc>
		 Get the reference to a specific visible object like an image.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Get the reference to a specific visible object like an image.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:ICustomEventDispatcher"><apiName>ICustomEventDispatcher</apiName><shortdesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 removeAllEventListeners function.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 <codeph>removeAllEventListeners</codeph> function.
	 
	 <p>It is required to extends Shared.EventDispatcher to implement this interface</p>
	 </apiDesc></apiClassifierDetail><apiOperation id="Interfaces:ICustomEventDispatcher:Interfaces:ICustomEventDispatcher:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Interfaces:ICustomSelectable"><apiName>ICustomSelectable</apiName><shortdesc>
	 This interface is for accessing information of any selectable component.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface is for accessing information of any selectable component. These components are generally used within questions. It allows the program to iterate the references and look for already selected Objects.
	 Instead of overwriting the synchronize() function in each new question class, you just have to assure it implements this interface.
	 
	 <p>By using this, it is possible to implement a radio button or check box behavior for an image or other visual components, without extending these classes</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:ICustomSelectable:Interfaces:ICustomSelectable:selected:get"><apiName>selected</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:ICustomWritable"><apiName>ICustomWritable</apiName><shortdesc>
	 Adds the textvalue to a component.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Adds the textvalue to a component. Makes possible to implement writable components and access them runtime via arrays or lists or other runtime build references.
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:ICustomWritable:Interfaces:ICustomWritable:text:get"><apiName>text</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>