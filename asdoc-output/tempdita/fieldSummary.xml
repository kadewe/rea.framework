<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="DisplayApplication.Components"><apiName>DisplayApplication.Components</apiName><apiClassifier id="DisplayApplication.Components:SmallEyeButton"><apiName>SmallEyeButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:MiniSoundButton"><apiName>MiniSoundButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:SmallSoundButton"><apiName>SmallSoundButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:SelectableImage"><apiName>SelectableImage</apiName><shortdesc>
	 A simple extension of an image, inmplementing the selectable idea.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface><apiBaseClassifier>Shared:CustomImage</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A simple extension of an image, inmplementing the selectable idea. This image can be uses with others to simulate an image based single- or multiple choice construct.
	 </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.Components:SelectableImage:hoverColor"><apiName>hoverColor</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0xFFD779</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication.Components:SelectableImage:selectedColor"><apiName>selectedColor</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0x4466FF</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication.Components:SelectableImage:hovered:get"><apiName>hovered</apiName><shortdesc>
		 access the hovered property
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 access the hovered property
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.Components:SelectableImage:selected:get"><apiName>selected</apiName><shortdesc>
		 access the selected property
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 access the selected property
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.Components:BackButton"><apiName>BackButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomCheckBox"><apiName>CustomCheckBox</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface><apiBaseClassifier>spark.components:CheckBox</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:ForwardButton"><apiName>ForwardButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:StartButton"><apiName>StartButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomDesignButton"><apiName>CustomDesignButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication.Components:CustomDesignButton:reference"><apiName>reference</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomTextInput"><apiName>CustomTextInput</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="text"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomWritable</apiBaseInterface><apiBaseClassifier>spark.components:TextInput</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:SoundButton"><apiName>SoundButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomRadioButton"><apiName>CustomRadioButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface><apiBaseClassifier>spark.components:RadioButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="DisplayApplication.CustomSkins"><apiName>DisplayApplication.CustomSkins</apiName><apiClassifier id="DisplayApplication.CustomSkins:CustomForwardButtonSkin"><apiName>CustomForwardButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomForwardButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomForwardButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomSoundButtonSkin"><apiName>CustomSoundButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomSoundButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin"><apiName>CustomVideoPlayerSkin</apiName><shortdesc>The default skin class for the Spark VideoPlayer component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark VideoPlayer component.  
     </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:clippedGroup"><apiName>clippedGroup</apiName><shortdesc>Video and player controls are clipped if they exceed the size of the 
          component, but the drop shadow above is not clipped and sizes to the component.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>Video and player controls are clipped if they exceed the size of the 
          component, but the drop shadow above is not clipped and sizes to the component.
          We also set verticalScrollPosition so that when we do clip, rather than clipping  
          off the bottom first, we clip off the top fist.  This is so the player controls 
          are still visible when we start clipping.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:currentTimeDisplay"><apiName>currentTimeDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:durationDisplay"><apiName>durationDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:VideoPlayer"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:playPauseButton"><apiName>playPauseButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:ToggleButton"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:playerControls"><apiName>playerControls</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:scrubBar"><apiName>scrubBar</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components.mediaClasses:ScrubBar"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:videoDisplay"><apiName>videoDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:VideoDisplay"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:volumeBar"><apiName>volumeBar</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components.mediaClasses:VolumeBar"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomButtonSkin"><apiName>CustomButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomStartButtonSkin"><apiName>CustomStartButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomStartButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomStartButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin"><apiName>CustomDimesionButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomRadioSkin"><apiName>CustomRadioSkin</apiName><shortdesc>The default skin class for a Spark RadioButton component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for a Spark RadioButton component.  
       </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomRadioSkin:dot"><apiName>dot</apiName><shortdesc>Defines the appearance of the RadioButton's dot.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Ellipse"/></apiValueDef><apiDesc>Defines the appearance of the RadioButton's dot. To customize the appearance of the dot, create a custom RadioButtonSkin class.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomRadioSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:RadioButton"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomBackButtonSkin"><apiName>CustomBackButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomBackButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomBackButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomEyeButtonSkin"><apiName>CustomEyeButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
       </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomEyeButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomLoginPanelSkin"><apiName>CustomLoginPanelSkin</apiName><shortdesc>The default skin class for a Spark Panel container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for a Spark Panel container.  
    </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:background"><apiName>background</apiName><shortdesc>Defines the appearance of the PanelSkin class's background.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Rect"/></apiValueDef><apiDesc>Defines the appearance of the PanelSkin class's background.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:contents"><apiName>contents</apiName><shortdesc>Contains the vertical stack of titlebar content and controlbar.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>Contains the vertical stack of titlebar content and controlbar.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Panel"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomTextInputSkin"><apiName>CustomTextInputSkin</apiName><shortdesc>The default skin class for Spark TextInput component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for Spark TextInput component.  
     </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomTextInputSkin:background"><apiName>background</apiName><shortdesc>Defines the appearance of the TextInput component's background.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Rect"/></apiValueDef><apiDesc>Defines the appearance of the TextInput component's background.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:RichEditableText"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:SoundButtonSkin"><apiName>SoundButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
       </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:SoundButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomLoginInputSkin"><apiName>CustomLoginInputSkin</apiName><shortdesc>The default skin class for Spark TextInput component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for Spark TextInput component.  
     </apiDesc></apiClassifierDetail><apiValue id="DisplayApplication.CustomSkins:CustomLoginInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:RichEditableText"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="DisplayApplication.ItemView"><apiName>DisplayApplication.ItemView</apiName><apiClassifier id="DisplayApplication.ItemView:InstructionField"><apiName>InstructionField</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication.ItemView:InstructionField:instruction"><apiName>instruction</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextArea"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaBtnNext"><apiName>reaBtnNext</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaSoundImg"><apiName>reaSoundImg</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Image</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaPanelCom"><apiName>reaPanelCom</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaBackimg"><apiName>reaBackimg</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Image</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="DisplayApplication"><apiName>DisplayApplication</apiName><apiClassifier id="DisplayApplication:LogInView"><apiName>LogInView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication:LogInView:innerLayout"><apiName>innerLayout</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input1"><apiName>input1</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input2"><apiName>input2</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input3"><apiName>input3</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input4"><apiName>input4</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:inputGroup"><apiName>inputGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input"><apiName>input</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:loginInstructionBox"><apiName>loginInstructionBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:loginSoundButton"><apiName>loginSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:login_newCode"><apiName>login_newCode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:login_submitButton"><apiName>login_submitButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:newuserSoundButton"><apiName>newuserSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:noButton"><apiName>noButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:pleaseEnterCode"><apiName>pleaseEnterCode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:registerInstructionBox"><apiName>registerInstructionBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:registerSoundButton"><apiName>registerSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:retryInput"><apiName>retryInput</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:retrylabel"><apiName>retrylabel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:retrysound"><apiName>retrysound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SmallSoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:testMadeInPast"><apiName>testMadeInPast</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:testedButtons"><apiName>testedButtons</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:HGroup"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:testedQuestionBox"><apiName>testedQuestionBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:yesButton"><apiName>yesButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:yourNewCode"><apiName>yourNewCode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:StartAppView"><apiName>StartAppView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication:StartAppView:mainAppStartButton"><apiName>mainAppStartButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:StartButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:StartAppView:videoPlayer"><apiName>videoPlayer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:VideoPlayer"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:StartAppView:videoSource"><apiName>videoSource</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components.mediaClasses:DynamicStreamingVideoSource"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:ErrorView"><apiName>ErrorView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail></apiClassifier><apiClassifier id="DisplayApplication:DisplayWrapper"><apiName>DisplayWrapper</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication:DisplayWrapper:tile"><apiName>tile</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers:Tile"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:Overview"><apiName>Overview</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication:Overview:button0"><apiName>button0</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:button1"><apiName>button1</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:button2"><apiName>button2</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:button3"><apiName>button3</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:chooseSubjectSnd"><apiName>chooseSubjectSnd</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:chooseSubject"><apiName>chooseSubject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:description"><apiName>description</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:levelButtonsContainer"><apiName>levelButtonsContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:levelSoundButton"><apiName>levelSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:levelgroup"><apiName>levelgroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:overviewgroup"><apiName>overviewgroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:whatLevel"><apiName>whatLevel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:QuestionView"><apiName>QuestionView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication:QuestionView:buttonArea"><apiName>buttonArea</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:QuestionView:content"><apiName>content</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:ItemViewContainer"><apiName>ItemViewContainer</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication:ItemViewContainer:bgContainer"><apiName>bgContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:SkinnableContainer"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:instrGroup"><apiName>instrGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:item_questionWrapperBox"><apiName>item_questionWrapperBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:BorderContainer"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:itembgImage"><apiName>itembgImage</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls:Image"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:preGroup"><apiName>preGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:TestFinishedView"><apiName>TestFinishedView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="DisplayApplication:TestFinishedView:FINISHED"><apiName>FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>finished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:PRINT"><apiName>PRINT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>print</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:congratsContainer"><apiName>congratsContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:congratsSound"><apiName>congratsSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:congrats"><apiName>congrats</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:endReference"><apiName>endReference</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:forwardButton"><apiName>forwardButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:CustomDesignButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:mainAppEndButton"><apiName>mainAppEndButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:CustomDesignButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:newTReference"><apiName>newTReference</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:newTestButton"><apiName>newTestButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:CustomDesignButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:printIcon"><apiName>printIcon</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls:Image"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:printSound"><apiName>printSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:printTextContainer"><apiName>printTextContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:whatNextSound"><apiName>whatNextSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:whatNext"><apiName>whatNext</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:youCanPrint"><apiName>youCanPrint</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="Interfaces"><apiName>Interfaces</apiName><apiClassifier id="Interfaces:ICustomModule"><apiName>ICustomModule</apiName><shortdesc>
	 Defines the minimal criteria for a class to be a module.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Defines the minimal criteria for a class to be a module. This makes it possible for the MainAppManager to load any Module with the same abstract sequence of instructions.
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:ICustomModule:Interfaces:ICustomModule:debug:set"><apiName>debug</apiName><shortdesc>
		 Set the Debugging state to true.
		 Enables to determine errors without sourcecode by showing alertboxes, if an error occurs
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 <p>Set the Debugging state to <codeph>true</codeph>.</p>
		 <p>Enables to determine errors without sourcecode by showing alertboxes, if an error occurs</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Interfaces:ICustomModule:Interfaces:ICustomModule:soundMode:set"><apiName>soundMode</apiName><shortdesc>
		 Sets sound to on or off
		 Enables to use application without sound errors, ideal for rapid item development and debug
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 <p>Sets sound to on or off</p>
		 <p>Enables to use application without sound errors, ideal for rapid item development and debug</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:IClickableComponent"><apiName>IClickableComponent</apiName><shortdesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.
	 
	 <p>There are many different Types of buttons in this application, many of them have refer to a sound and therefore we need to generalize the 
	 properties of a button which makes ist possible to play a sound by clickign itr dragging it</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:IClickableComponent:Interfaces:IClickableComponent:referringTo:get"><apiName>referringTo</apiName><shortdesc>
		 Get the reference to a specific sound object.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Get the reference to a specific sound object.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Interfaces:IClickableComponent:Interfaces:IClickableComponent:visibleReference:get"><apiName>visibleReference</apiName><shortdesc>
		 Get the reference to a specific visible object like an image.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Get the reference to a specific visible object like an image.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:ICustomEventDispatcher"><apiName>ICustomEventDispatcher</apiName><shortdesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 removeAllEventListeners function.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 <codeph>removeAllEventListeners</codeph> function.
	 
	 <p>It is required to extends Shared.EventDispatcher to implement this interface</p>
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="Interfaces:ICustomSelectable"><apiName>ICustomSelectable</apiName><shortdesc>
	 This interface is for accessing information of any selectable component.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface is for accessing information of any selectable component. These components are generally used within questions. It allows the program to iterate the references and look for already selected Objects.
	 Instead of overwriting the synchronize() function in each new question class, you just have to assure it implements this interface.
	 
	 <p>By using this, it is possible to implement a radio button or check box behavior for an image or other visual components, without extending these classes</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:ICustomSelectable:Interfaces:ICustomSelectable:selected:get"><apiName>selected</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:ICustomWritable"><apiName>ICustomWritable</apiName><shortdesc>
	 Adds the textvalue to a component.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Adds the textvalue to a component. Makes possible to implement writable components and access them runtime via arrays or lists or other runtime build references.
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:ICustomWritable:Interfaces:ICustomWritable:text:get"><apiName>text</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="ItemApplication.QuestionTypes"><apiName>ItemApplication.QuestionTypes</apiName><apiClassifier id="ItemApplication.QuestionTypes:SelectAndWrite"><apiName>SelectAndWrite</apiName><shortdesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:ScCloud"><apiName>ScCloud</apiName><shortdesc>
	 Provides a cloud of radiobuttons and labels to click.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:SingleChoice</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides a cloud of radiobuttons and labels to click. The positions within the cloud will be chosen randomly and the cloud can increase its size by having trouble with positioning elements due to limited space.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:SingleChoice"><apiName>SingleChoice</apiName><shortdesc>
	 Representing the process of loading, arranging and displaying data within a single choice item.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Representing the process of loading, arranging and displaying data within a single choice item. The data model is a radiobutton group, whcih allows only one choice per question.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:QuestionsObject"><apiName>QuestionsObject</apiName><shortdesc>
	 Defines the basic structure and bahvior of a question object.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines the basic structure and bahvior of a question object. The detailed behavior like load and display data is defined in each of the extending quesion classes.
	 
	 <p>A special feature is the load content by page behavior. All Data will be loaded immediately after calling the specific questionspage and will be unloaded
	 by calling another questionpage. This frees memory and enables a fluid application.</p>
	 </apiDesc></apiClassifierDetail><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:_listeners"><apiName>_listeners</apiName><shortdesc>
		 managing listeners (for parent object)
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
		 managing listeners (for parent object)
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:allAnswers"><apiName>allAnswers</apiName><shortdesc>
		 Stores the summary of all answers arrays (all answers of all questionpages)
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Stores the summary of all answers arrays (all answers of all questionpages)
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:answers"><apiName>answers</apiName><shortdesc>
		 Stores information about the recent user input, this Array is used temporary for each questionpage.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Stores information about the recent user input, this Array is used temporary for each questionpage.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:firstPulseObject"><apiName>firstPulseObject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:moduleState"><apiName>moduleState</apiName><shortdesc>
		 The state of the module.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The state of the module.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:qView"><apiName>qView</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:QuestionView</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:qpState"><apiName>qpState</apiName><shortdesc>
		 This States affects only internal processes --&gt; next page / previous page
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This States affects only internal processes --&gt; next page / previous page
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:references"><apiName>references</apiName><shortdesc>
		 stores references to all the question related instances to ensure removing
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 stores references to all the question related instances to ensure removing
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:relUrl"><apiName>relUrl</apiName><shortdesc>
		 relative url path for loading data
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
		 relative url path for loading data
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:scriptUrl"><apiName>scriptUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:source"><apiName>source</apiName><shortdesc>
		 xml source data, received from itemObject
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef><apiDesc>
		 xml source data, received from itemObject
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:_moduleState:set"><apiName>_moduleState</apiName><shortdesc>
		 Set the current module state.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Set the current module state. Important for finishing the questions and evaluate the answers in the parent object.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:_qpState:get"><apiName>_qpState</apiName><shortdesc>
		 Get the current questionspage state.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Get the current questionspage state.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:ignoreSound:get"><apiName>ignoreSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:Cloze"><apiName>Cloze</apiName><shortdesc>
	 Representing the loading, arranging and displaying data for a cloze text.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Representing the loading, arranging and displaying data for a cloze text.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:MultipleChoice"><apiName>MultipleChoice</apiName><shortdesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item. The data model is a checkbox group, which allows one or many or all selected choices as an answer.
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="ItemApplication"><apiName>ItemApplication</apiName><apiClassifier id="ItemApplication:ItemEvent"><apiName>ItemEvent</apiName><shortdesc>
	 Defines a set of events realted to the item object and its children.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines a set of events realted to the item object and its children. Also stores the result xml of the actual item, in order to pass it to other handlers.
	 </apiDesc></apiClassifierDetail><apiValue id="ItemApplication:ItemEvent:DATA_RECEIVED"><apiName>DATA_RECEIVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dataReceived</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:DATA_SENT"><apiName>DATA_SENT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dataSent</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:ITEM_ONLOAD"><apiName>ITEM_ONLOAD</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemOnload</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:PAGE_CHANGED"><apiName>PAGE_CHANGED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pageChanged</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:QPAGE_FINISHED"><apiName>QPAGE_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:QPAGE_LOADED"><apiName>QPAGE_LOADED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageLoaded</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:_dataObject:get"><apiName>_dataObject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="ItemApplication:ItemObject"><apiName>ItemObject</apiName><shortdesc>
	 Represents a handler for all item releated actions.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents a handler for all item releated actions.
	 </apiDesc></apiClassifierDetail><apiValue id="ItemApplication:ItemObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:protected:nextItem"><apiName>nextItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:obData"><apiName>obData</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:relUrl"><apiName>relUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:userNumber"><apiName>userNumber</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:view"><apiName>view</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:ItemViewContainer</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:currentTime:get"><apiName>currentTime</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="ItemApplication:xmlLoader"><apiName>xmlLoader</apiName><shortdesc>
	 XML Loader Class
	 
	 Version: 	0.1.6
	 DOC: 		02.11.2010
	 Author: 	Jan Küster
	 
	 Last Update: 09.11.2010
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 XML Loader Class
	 
	 Version: 	0.1.6
	 DOC: 		02.11.2010
	 Author: 	Jan Küster
	 
	 Last Update: 09.11.2010
	 </apiDesc></apiClassifierDetail><apiValue id="ItemApplication:xmlLoader:n_abilities"><apiName>n_abilities</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_answers"><apiName>n_answers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_correctResponse"><apiName>n_correctResponse</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_instruction"><apiName>n_instruction</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_itemCreation"><apiName>n_itemCreation</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_itemNumber"><apiName>n_itemNumber</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_marking"><apiName>n_marking</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_metaItem"><apiName>n_metaItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_nextitem"><apiName>n_nextitem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_preScreen"><apiName>n_preScreen</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_presets"><apiName>n_presets</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_questions"><apiName>n_questions</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_time"><apiName>n_time</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_userNumber"><apiName>n_userNumber</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:xload"><apiName>xload</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Shared:XLoader</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:xmlResult:get"><apiName>xmlResult</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="MainApplication"><apiName>MainApplication</apiName><apiClassifier id="MainApplication:OverviewObject"><apiName>OverviewObject</apiName><shortdesc>
	 the handler class for an overview, where users will choose their next testcollection by choosing a dimension and the corresponding level.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 the handler class for an overview, where users will choose their next testcollection by choosing a dimension and the corresponding level.
	 </apiDesc></apiClassifierDetail><apiValue id="MainApplication:OverviewObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc>
		 representing the event, where this class has finished the loading process
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 representing the event, where this class has finished the loading process
		 </apiDesc></apiValueDetail></apiValue><apiValue id="MainApplication:OverviewObject:debug:get"><apiName>debug</apiName><shortdesc>
		 gets debug value 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 gets debug value 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="MainApplication:OverviewObject:soundMode:get"><apiName>soundMode</apiName><shortdesc>
		 gets sounddebug value
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 gets sounddebug value
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:StartAppObject"><apiName>StartAppObject</apiName><shortdesc>
	 First module, loaded after initialization of the application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p>First module, loaded after initialization of the application. Includes a VideoPlayer for introducing the applications funcionalities.</p> 
	 </apiDesc></apiClassifierDetail><apiValue id="MainApplication:StartAppObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:StartAppObject:view"><apiName>view</apiName><shortdesc>
		 The view component, which will be linked to the display.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:StartAppView</apiValueClassifier></apiValueDef><apiDesc>
		 The view component, which will be linked to the display.
		 
		 </apiDesc></apiValueDetail><related-links><link href="MainApplication.xml#MainAppManager"><linktext>MainApplication.MainAppManager</linktext></link><link href="MainApplication.xml#DisplayManager"><linktext>MainApplication.DisplayManager</linktext></link></related-links></apiValue><apiValue id="MainApplication:StartAppObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:StartAppObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:MainAppManager"><apiName>MainAppManager</apiName><shortdesc>
	 The core controller class.</shortdesc><prolog><author>Jan Küster
	 
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The core controller class.
	 Manages the loading and unloading of the modules as well as the communication between them and the model related data.
	 Modules a loaded by name, their functions are accessed via <codeph>ICustomModule</codeph> interface.
	 The view component of the modules get connected with the <codeph>DisplayManager</codeph>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="MainApplication:MainAppManager:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:MainAppManager:MODULE_FINISHED"><apiName>MODULE_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:TestFinishedObject"><apiName>TestFinishedObject</apiName><shortdesc>
	 After finishing a test, this Class is loaded to provide functions for printing the evaluation and choosing the further activities.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 After finishing a test, this Class is loaded to provide functions for printing the evaluation and choosing the further activities.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="MainApplication:TestFinishedObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:TestFinishedObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:TestFinishedObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:DisplayManager"><apiName>DisplayManager</apiName><shortdesc>
	 The DisplayManager is one of the core classes to provide a management all visual components.</shortdesc><prolog><asMetadata><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:BorderContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DisplayManager is one of the core classes to provide a management all visual components.
	 This allows the <codeph>MainAppmanager</codeph> to include or remove specific view components of a module.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="MainApplication:DisplayManager:DISPLAY_ERROR"><apiName>DISPLAY_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dispalyError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:DisplayManager:DISPLAY_TWEENEDOUT"><apiName>DISPLAY_TWEENEDOUT</apiName><shortdesc>
		 Event Const for dispatching status of tweened out / fade out complete.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayTweenedOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Event Const for dispatching status of tweened out / fade out complete.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="MainApplication.layer.xml"><linktext>layer</linktext></link></related-links></apiValue><apiValue id="MainApplication:DisplayManager:inheritedObj"><apiName>inheritedObj</apiName><shortdesc>
		 The target object, which will be dispalyed on the screen.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
		 The target object, which will be dispalyed on the screen.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:LoginObject"><apiName>LoginObject</apiName><shortdesc>
	 Represents a login form handler.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents a login form handler. User input will be sent to the server, server evaluates and answers with a value. The value influences the state of the handler and
	 either a login is performed or fault or a new user code is requestet.
	 </apiDesc></apiClassifierDetail><apiValue id="MainApplication:LoginObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:LOGIN_FAULT"><apiName>LOGIN_FAULT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>logInFault</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:LOGIN_SUCCESS"><apiName>LOGIN_SUCCESS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loginSuccess</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:REQUEST_ERROR"><apiName>REQUEST_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>requestError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:USERDATA_RECEIVED"><apiName>USERDATA_RECEIVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userDataReceived</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:protected:loginState"><apiName>loginState</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:view"><apiName>view</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:LogInView</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:data:get"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:LoaderManagement"><apiName>LoaderManagement</apiName><shortdesc>
	 A static class, representing a sequence to arrange the required modules in a predefined order.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A static class, representing a sequence to arrange the required modules in a predefined order.
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="Model"><apiName>Model</apiName><apiClassifier id="Model:Collection"><apiName>Collection</apiName><shortdesc>
	 A class representing one testcollection of a dimension / subject.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A class representing one testcollection of a dimension / subject. 
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="Model:Session"><apiName>Session</apiName><shortdesc>
	 This is a Data Structure, where each session for one item is stored.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This is a Data Structure, where each session for one item is stored. In detail, it stores the slected dimension, level and item. This ensures, that application always knows, where the user is at the moment.
	 </apiDesc></apiClassifierDetail><apiValue id="Model:Session:dimension:get"><apiName>dimension</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Session:item:get"><apiName>item</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Session:level:get"><apiName>level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Session:next:get"><apiName>next</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Model:TestCollection"><apiName>TestCollection</apiName><shortdesc>
	 This class loads the xml with the contained information about subjects, levels and item IDs and parse it into an XMLLIST.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class loads the xml with the contained information about subjects, levels and item IDs and parse it into an XMLLIST. 
	 <p>The data is read-only and will be written only once when the class will be initialized</p>
	 <p>To overwirte the data, the class must be unloaded and be instanciated again</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="Model:TestCollection:TC_BUILD"><apiName>TC_BUILD</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tcBuild</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:TestCollection:TC_ERROR"><apiName>TC_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tcError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Model:UserObject"><apiName>UserObject</apiName><shortdesc>
	 This class represents the login session of a certain user.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class represents the login session of a certain user. The information are stored temporarily and usually written in an xml file which will be permanently send to the server.
	 </apiDesc></apiClassifierDetail><apiValue id="Model:UserObject:CREATION_COMPLETE"><apiName>CREATION_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:CREATION_ERROR"><apiName>CREATION_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:protected:_test"><apiName>_test</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:relUrl"><apiName>relUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:protected:state"><apiName>state</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:protected:tempTimeStamp"><apiName>tempTimeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:userData"><apiName>userData</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:userName"><apiName>userName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:_userData:get"><apiName>_userData</apiName><shortdesc>
		 returns the userdata as an xml object
		 
		 </shortdesc><prolog><asCustoms><returns>user data file as an xml object
		 </returns></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="XML"/></apiValueDef><apiDesc>
		 returns the userdata as an xml object
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Model:Dimension"><apiName>Dimension</apiName><shortdesc>
	 This class represents a dimension or subject with all its included data.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class represents a dimension or subject with all its included data.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="Model:Globals"><apiName>Globals</apiName><shortdesc>
	 This class is a model for all global settings like paths and labels.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class is a model for all global settings like paths and labels.
	 
	 <p>The globals.xml file will be analysed and the particular data will be stored in different arrays</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Model:Globals:GLOBALS_FAULT"><apiName>GLOBALS_FAULT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>globalsFault</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Globals:GLOBALS_LOADED"><apiName>GLOBALS_LOADED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>globalsLoaded</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Globals:debugMode:get"><apiName>debugMode</apiName><shortdesc>
		 returns a boolean value, whether debug is enabled or disabled
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 returns a boolean value, whether debug is enabled or disabled
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Model:Globals:labels:get"><apiName>labels</apiName><shortdesc>
		 reutns all labels stored in an array 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
		 reutns all labels stored in an array 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Model:Globals:paths:get"><apiName>paths</apiName><shortdesc>
		 returns all paths stored in an array
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
		 returns all paths stored in an array
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Model:Globals:soundIgnore:get"><apiName>soundIgnore</apiName><shortdesc>
		 returns a boolean value, whether sound is enabled or disabled
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 returns a boolean value, whether sound is enabled or disabled
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="Shared"><apiName>Shared</apiName><apiClassifier id="Shared:UserEvent"><apiName>UserEvent</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="Shared:UserEvent:ENDTEST_CHOSEN"><apiName>ENDTEST_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>endTestChosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:NEWTEST_CHOSEN"><apiName>NEWTEST_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>newTestChosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:START_APPLICATION"><apiName>START_APPLICATION</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startApplication</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:SUBJ_AND_LEVEL_CHOSEN"><apiName>SUBJ_AND_LEVEL_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subjandlevelchosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:USERDATA_RECEIVED"><apiName>USERDATA_RECEIVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userDataReceived</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_level:get"><apiName>_level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_subject:get"><apiName>_subject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_userData:get"><apiName>_userData</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:XMLWriter"><apiName>XMLWriter</apiName><shortdesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="Shared:MP3Audio"><apiName>MP3Audio</apiName><shortdesc>
	 Creates a new wrapper for loaded mp3 files.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Creates a new wrapper for loaded mp3 files. Can handle all required events for a common mp3 player like play, pause, stop etc. The underlying data structure is a Sound Object.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="Shared:MP3Audio:FINISHED_PLAYING"><apiName>FINISHED_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>finishedPLaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:INIT_COMPLETE"><apiName>INIT_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>initComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:ONLOAD_ERROR"><apiName>ONLOAD_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>onLoadError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:PAUSE_PLAYING"><apiName>PAUSE_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pausePlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:START_PLAYING"><apiName>START_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startPlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:STOPPED_PLAYING"><apiName>STOPPED_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stoppedPlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:id"><apiName>id</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:parent"><apiName>parent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:ErrorDispatcher"><apiName>ErrorDispatcher</apiName><shortdesc>
	 Static class.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Static class. Prepares a custom error type to be send to server which writes an error log
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="Shared:HorizontalMultilineLayout"><apiName>HorizontalMultilineLayout</apiName><shortdesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.</shortdesc><prolog><asMetadata/><asCustoms><tzi.de>
	 Modification: Layout-in-Row --&gt; Text can be aligned into middle, top or bottom align in each line,
	 Text can be aligned by the measurements of a source element (e.g. an image) in each line, Text can be aligned by a fixed
	 pixel value in each line. 
	 </tzi.de></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.
	 
	 copyright: Maxim Kachurovskiy
	 http://cookbooks.adobe.com/post_Horizontal_Multiline_Layout-17807.html
	 
	 Code is modified by Jan Kuester, University of bremen jank87</apiDesc></apiClassifierDetail><apiValue id="Shared:HorizontalMultilineLayout:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:lineHeightInPixel:get"><apiName>lineHeightInPixel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:lineHeightSource:get"><apiName>lineHeightSource</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:ILayoutElement"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingRight:get"><apiName>paddingRight</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingTop:get"><apiName>paddingTop</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalGap:get"><apiName>verticalGap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalLayoutInLine:get"><apiName>verticalLayoutInLine</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomImage"><apiName>CustomImage</apiName><shortdesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>mx.controls:Image</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners. Be aware, that it requires the data as a base64 string.
	 </apiDesc></apiClassifierDetail><apiValue id="Shared:CustomImage:CREATION_COMPLETE"><apiName>CREATION_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationcomplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomButton"><apiName>CustomButton</apiName><shortdesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.</shortdesc><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseInterface>Interfaces:IClickableComponent</apiBaseInterface><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.
	 <p>Most buttons in this Application will extend this</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Shared:CustomButton:referringTo:get"><apiName>referringTo</apiName><shortdesc>
		 get the reference to the linked object
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 get the reference to the linked object
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:CustomButton:visibleReference:get"><apiName>visibleReference</apiName><shortdesc>
		 gets a reference to a linked visible object
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 gets a reference to a linked visible object
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:StaticFunctions"><apiName>StaticFunctions</apiName><shortdesc>
	 This Class contains a set of static functions which will be called by any class in the project.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This Class contains a set of static functions which will be called by any class in the project.
	 Its a kind of collection of generic functions. 
	 </apiDesc></apiClassifierDetail><apiValue id="Shared:StaticFunctions:OBJECT_FADE_IN"><apiName>OBJECT_FADE_IN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectFadeIn</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:OBJECT_FADE_OUT"><apiName>OBJECT_FADE_OUT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectFadeOut</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:OBJECT_RESIZED"><apiName>OBJECT_RESIZED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectResized</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:alpha"><apiName>alpha</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:sizeX"><apiName>sizeX</apiName><shortdesc>
		 for resizeX method
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 for resizeX method
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:staticDispatcher"><apiName>staticDispatcher</apiName><shortdesc>
		 Allows a static class to dispatch Events dynamically.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>Shared:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
		 Allows a static class to dispatch Events dynamically.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:targets"><apiName>targets</apiName><shortdesc>
		 Pointer on multiple Object to use within a method of this class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Pointer on multiple Object to use within a method of this class. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:target"><apiName>target</apiName><shortdesc>
		 Pointer on a single Object to use within multple methods (especially event driven methods).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
		 Pointer on a single Object to use within multple methods (especially event driven methods).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:tweenObj"><apiName>tweenObj</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:StaticMath"><apiName>StaticMath</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="Shared:MyBase64Decoder"><apiName>MyBase64Decoder</apiName><shortdesc>
	 A utility class to decode a Base64 encoded String to a ByteArray.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to decode a Base64 encoded String to a ByteArray. Extends Shared.EventDispatcher to dispatch and remove events dynamically
	 
	  
	  </apiDesc></apiClassifierDetail><apiValue id="Shared:MyBase64Decoder:BYTES_CONVERTED"><apiName>BYTES_CONVERTED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bytesConverted</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:ItemEvent"><apiName>ItemEvent</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="Shared:ItemEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:ITEM_PLUS"><apiName>ITEM_PLUS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemPlus</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:QPAGE_BACK"><apiName>QPAGE_BACK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageBack</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:QPAGE_FORWARD"><apiName>QPAGE_FORWARD</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageForward</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:START_ITEM"><apiName>START_ITEM</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startItem</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:WRITE_DATA"><apiName>WRITE_DATA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>writeData</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:currentItem"><apiName>currentItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:nextItem"><apiName>nextItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:timeStamp"><apiName>timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_currentItem:get"><apiName>_currentItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_nextitem:get"><apiName>_nextitem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_timeStamp:get"><apiName>_timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomModuleEvents"><apiName>CustomModuleEvents</apiName><shortdesc>
	 An event class for passing session related values via event.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An event class for passing session related values via event. Especially useful if you want to avoid to code this into an interface (and therefore into all other module classes).
	 </apiDesc></apiClassifierDetail><apiValue id="Shared:CustomModuleEvents:MODULE_FINISHED"><apiName>MODULE_FINISHED</apiName><shortdesc>
		 Declares the state of being ready to unload.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moduleFinished</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Declares the state of being ready to unload. Related to any module.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_dimension:get"><apiName>_dimension</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_isNext:get"><apiName>_isNext</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_itemString:get"><apiName>_itemString</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_level:get"><apiName>_level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_timeStamp:get"><apiName>_timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_updatedXML:get"><apiName>_updatedXML</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_userDataUrl:get"><apiName>_userDataUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.
	 Idea and concept by Justin Shacklette, Copyright holds Justin Shacklette www.saturnboy.com
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="Shared:XLoader"><apiName>XLoader</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="Shared:XLoader:service"><apiName>service</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="mx.rpc.http:HTTPService"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:XLoader:result:get"><apiName>result</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="__Global__"><apiName>__Global__</apiName><apiClassifier id="globalClassifier:_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory"><apiName>_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      The RSLs loaded by this system manager before the application
      starts.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      The RSLs loaded by this system manager before the application
      starts. RSLs loaded by the application are not included in this list.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:xmlTest"><apiName>xmlTest</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Application</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiValue id="xmlTest:dManager"><apiName>dManager</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>MainApplication:DisplayManager</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="enumTypes"><apiName>enumTypes</apiName><apiClassifier id="enumTypes:ErrorTypeEnum"><apiName>ErrorTypeEnum</apiName><shortdesc>
	 Enumeration of error types to indicate the number and the type of the error.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Enumeration of error types to indicate the number and the type of the error.
	 </apiDesc></apiClassifierDetail><apiValue id="enumTypes:ErrorTypeEnum:CANNOT_LOAD_MODULE"><apiName>CANNOT_LOAD_MODULE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:CANNOT_PLAY_AUDIO_ERROR"><apiName>CANNOT_PLAY_AUDIO_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:NULLREFERENCE"><apiName>NULLREFERENCE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:URL_INVALID_ERROR"><apiName>URL_INVALID_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:list:get"><apiName>list</apiName><shortdesc>
		 returns an array with all enums.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 returns an array with all enums.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="enumTypes:PHPParameterTypeEnum"><apiName>PHPParameterTypeEnum</apiName><shortdesc>
	 Collection of enumeration ids, to access php parameters.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Collection of enumeration ids, to access php parameters. They are hardcoded, so changes in this file will require changes in the include php file and vice versa.
	 </apiDesc></apiClassifierDetail><apiValue id="enumTypes:PHPParameterTypeEnum:CREATE_NEW_USER"><apiName>CREATE_NEW_USER</apiName><shortdesc>
		 The parametername to access the newUser script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the newUser script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_AUDIO"><apiName>GET_AUDIO</apiName><shortdesc>
		 The parametername to access the getAudio script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getAudio script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_IMAGE"><apiName>GET_IMAGE</apiName><shortdesc>
		 The parametername to access the getImage script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getImage script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_ITEM_DATA"><apiName>GET_ITEM_DATA</apiName><shortdesc>
		 The parametername to access the getItem script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getItem script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_USERDATA"><apiName>GET_USERDATA</apiName><shortdesc>
		 The parametername to access the getUser script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getUser script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:LOGIN"><apiName>LOGIN</apiName><shortdesc>
		 The parameter name to access the loginScript in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parameter name to access the loginScript in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:SEND_ERROR_MESSAGE"><apiName>SEND_ERROR_MESSAGE</apiName><shortdesc>
		 The parametername to access the sendError script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the sendError script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:SEND_FINAL_XML"><apiName>SEND_FINAL_XML</apiName><shortdesc>
		 The parametername to access the sendFinalXml script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the sendFinalXml script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:UPDATE_USER"><apiName>UPDATE_USER</apiName><shortdesc>
		 The parametername to access the updateUser script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the updateUser script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:list:get"><apiName>list</apiName><shortdesc>
		 returns an array with all enums.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 returns an array with all enums.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="enumTypes:UrlTypeEnum"><apiName>UrlTypeEnum</apiName><shortdesc>
	 Collection of enumeration ids, to access globals parameters.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Collection of enumeration ids, to access globals parameters. They are hardcoded, so changes in this file will require changes in the globals file and vice versa.
	 </apiDesc></apiClassifierDetail><apiValue id="enumTypes:UrlTypeEnum:INCLUDE_SCRIPT"><apiName>INCLUDE_SCRIPT</apiName><shortdesc>
		 The relative path to the includescript.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the includescript. Must be combined with ROOT to a full usable url
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:ITEM"><apiName>ITEM</apiName><shortdesc>
		 The relative path to the itemData directories.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the itemData directories. Must be combined with ROOT. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:ROOT"><apiName>ROOT</apiName><shortdesc>
		 Represents the root url on the server.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 Represents the root url on the server. It must be a realtive path to the root directory of this application and will be combined with other paths to load specific data or scripts
		 
		 <p>Example: <codeph>http://mydomain.subdomain.com/apps/thisapp/</codeph></p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:SOUNDS"><apiName>SOUNDS</apiName><shortdesc>
		 The relative path to the application sounds on the serve.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the application sounds on the serve. Does not include item sounds. Must be combined with ROOT. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:USER"><apiName>USER</apiName><shortdesc>
		 The relative path to the userData directories.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the userData directories. Must be combined with ROOT.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:list:get"><apiName>list</apiName><shortdesc>
		returns an array with all enums.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		returns an array with all enums.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="enumTypes:BasicEnumeration"><apiName>BasicEnumeration</apiName><shortdesc>
	 Basic grid of an enumeration.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Basic grid of an enumeration.
	 </apiDesc></apiClassifierDetail><apiValue id="enumTypes:BasicEnumeration:protected:_list"><apiName>_list</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:BasicEnumeration:protected:ordinal"><apiName>ordinal</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:BasicEnumeration:protected:value"><apiName>value</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage></allClasses>