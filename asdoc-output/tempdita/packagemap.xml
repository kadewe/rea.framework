<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="DisplayApplication.Components"><apiName>DisplayApplication.Components</apiName><apiDetail/><apiClassifier id="DisplayApplication.Components:SmallEyeButton"><apiName>SmallEyeButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:SmallEyeButton:SmallEyeButton"><apiName>SmallEyeButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:MiniSoundButton"><apiName>MiniSoundButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:MiniSoundButton:MiniSoundButton"><apiName>MiniSoundButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:SmallSoundButton"><apiName>SmallSoundButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:SmallSoundButton:SmallSoundButton"><apiName>SmallSoundButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:SelectableImage"><apiName>SelectableImage</apiName><shortdesc>
	 A simple extension of an image, inmplementing the selectable idea.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface><apiBaseClassifier>Shared:CustomImage</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A simple extension of an image, inmplementing the selectable idea. This image can be uses with others to simulate an image based single- or multiple choice construct.
	 </apiDesc></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:SelectableImage:SelectableImage"><apiName>SelectableImage</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>relativePath</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="Shared.xml#CustomImage"><linktext>Shared.CustomImage</linktext></link></related-links></apiConstructor><apiValue id="DisplayApplication.Components:SelectableImage:hoverColor"><apiName>hoverColor</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0xFFD779</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication.Components:SelectableImage:selectedColor"><apiName>selectedColor</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0x4466FF</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication.Components:SelectableImage:hovered:get"><apiName>hovered</apiName><shortdesc>
		 access the hovered property
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 access the hovered property
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.Components:SelectableImage:selected:get"><apiName>selected</apiName><shortdesc>
		 access the selected property
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 access the selected property
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.Components:BackButton"><apiName>BackButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:BackButton:BackButton"><apiName>BackButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomCheckBox"><apiName>CustomCheckBox</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface><apiBaseClassifier>spark.components:CheckBox</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:CustomCheckBox:CustomCheckBox"><apiName>CustomCheckBox</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:ForwardButton"><apiName>ForwardButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:ForwardButton:ForwardButton"><apiName>ForwardButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:StartButton"><apiName>StartButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:StartButton:StartButton"><apiName>StartButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomDesignButton"><apiName>CustomDesignButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:CustomDesignButton:CustomDesignButton"><apiName>CustomDesignButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.Components:CustomDesignButton:reference"><apiName>reference</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomTextInput"><apiName>CustomTextInput</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="text"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomWritable</apiBaseInterface><apiBaseClassifier>spark.components:TextInput</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:CustomTextInput:CustomTextInput"><apiName>CustomTextInput</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:SoundButton"><apiName>SoundButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:CustomButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:SoundButton:SoundButton"><apiName>SoundButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.Components:CustomRadioButton"><apiName>CustomRadioButton</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomSelectable</apiBaseInterface><apiBaseClassifier>spark.components:RadioButton</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.Components:CustomRadioButton:CustomRadioButton"><apiName>CustomRadioButton</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="DisplayApplication.CustomSkins"><apiName>DisplayApplication.CustomSkins</apiName><apiDetail/><apiClassifier id="DisplayApplication.CustomSkins:CustomForwardButtonSkin"><apiName>CustomForwardButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomForwardButtonSkin:CustomForwardButtonSkin"><apiName>CustomForwardButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomForwardButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomForwardButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomSoundButtonSkin"><apiName>CustomSoundButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomSoundButtonSkin:CustomSoundButtonSkin"><apiName>CustomSoundButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomSoundButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin"><apiName>CustomVideoPlayerSkin</apiName><shortdesc>The default skin class for the Spark VideoPlayer component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark VideoPlayer component.  
     </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.VideoPlayer.xml"><linktext>spark.components.VideoPlayer</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:CustomVideoPlayerSkin"><apiName>CustomVideoPlayerSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:clippedGroup"><apiName>clippedGroup</apiName><shortdesc>Video and player controls are clipped if they exceed the size of the 
          component, but the drop shadow above is not clipped and sizes to the component.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>Video and player controls are clipped if they exceed the size of the 
          component, but the drop shadow above is not clipped and sizes to the component.
          We also set verticalScrollPosition so that when we do clip, rather than clipping  
          off the bottom first, we clip off the top fist.  This is so the player controls 
          are still visible when we start clipping.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:currentTimeDisplay"><apiName>currentTimeDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#currentTimeDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc conref="spark.components.VideoPlayer#currentTimeDisplay"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:durationDisplay"><apiName>durationDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#durationDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc conref="spark.components.VideoPlayer#durationDisplay"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:VideoPlayer"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:playPauseButton"><apiName>playPauseButton</apiName><shortdesc conref="spark.components.VideoPlayer#playPauseButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:ToggleButton"/></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playPauseButton"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:playerControls"><apiName>playerControls</apiName><shortdesc conref="spark.components.VideoPlayer#playerControls"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playerControls"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:scrubBar"><apiName>scrubBar</apiName><shortdesc conref="spark.components.VideoPlayer#scrubBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components.mediaClasses:ScrubBar"/></apiValueDef><apiDesc conref="spark.components.VideoPlayer#scrubBar"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:videoDisplay"><apiName>videoDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#videoDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:VideoDisplay"/></apiValueDef><apiDesc conref="spark.components.VideoPlayer#videoDisplay"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomVideoPlayerSkin:volumeBar"><apiName>volumeBar</apiName><shortdesc conref="spark.components.VideoPlayer#volumeBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components.mediaClasses:VolumeBar"/></apiValueDef><apiDesc conref="spark.components.VideoPlayer#volumeBar"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomButtonSkin"><apiName>CustomButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomButtonSkin:CustomButtonSkin"><apiName>CustomButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomStartButtonSkin"><apiName>CustomStartButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomStartButtonSkin:CustomStartButtonSkin"><apiName>CustomStartButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomStartButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomStartButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin"><apiName>CustomDimesionButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin:CustomDimesionButtonSkin"><apiName>CustomDimesionButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomDimesionButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomRadioSkin"><apiName>CustomRadioSkin</apiName><shortdesc>The default skin class for a Spark RadioButton component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for a Spark RadioButton component.  
       </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.RadioButton.xml"><linktext>spark.components.RadioButton</linktext></link><link href="" invalidHref="spark.components.RadioButtonGroup.xml"><linktext>spark.components.RadioButtonGroup</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomRadioSkin:CustomRadioSkin"><apiName>CustomRadioSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomRadioSkin:dot"><apiName>dot</apiName><shortdesc>Defines the appearance of the RadioButton's dot.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Ellipse"/></apiValueDef><apiDesc>Defines the appearance of the RadioButton's dot. To customize the appearance of the dot, create a custom RadioButtonSkin class.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomRadioSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:RadioButton"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomBackButtonSkin"><apiName>CustomBackButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomBackButtonSkin:CustomBackButtonSkin"><apiName>CustomBackButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomBackButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomBackButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomEyeButtonSkin"><apiName>CustomEyeButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
       </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomEyeButtonSkin:CustomEyeButtonSkin"><apiName>CustomEyeButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomEyeButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomLoginPanelSkin"><apiName>CustomLoginPanelSkin</apiName><shortdesc>The default skin class for a Spark Panel container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for a Spark Panel container.  
    </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Panel.xml"><linktext>spark.components.Panel</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:CustomLoginPanelSkin"><apiName>CustomLoginPanelSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:background"><apiName>background</apiName><shortdesc>Defines the appearance of the PanelSkin class's background.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Rect"/></apiValueDef><apiDesc>Defines the appearance of the PanelSkin class's background.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:contents"><apiName>contents</apiName><shortdesc>Contains the vertical stack of titlebar content and controlbar.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>Contains the vertical stack of titlebar content and controlbar.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Panel#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc conref="spark.components.Panel#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Panel"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginPanelSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc conref="spark.components.Panel#titleDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc conref="spark.components.Panel#titleDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomTextInputSkin"><apiName>CustomTextInputSkin</apiName><shortdesc>The default skin class for Spark TextInput component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for Spark TextInput component.  
     </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.TextInput.xml"><linktext>spark.components.TextInput</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomTextInputSkin:CustomTextInputSkin"><apiName>CustomTextInputSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomTextInputSkin:background"><apiName>background</apiName><shortdesc>Defines the appearance of the TextInput component's background.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Rect"/></apiValueDef><apiDesc>Defines the appearance of the TextInput component's background.</apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:RichEditableText"/></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:SoundButtonSkin"><apiName>SoundButtonSkin</apiName><shortdesc>The default skin class for the Spark Button component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for the Spark Button component.  
       </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Button.xml"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:SoundButtonSkin:SoundButtonSkin"><apiName>SoundButtonSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:SoundButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.CustomSkins:CustomLoginInputSkin"><apiName>CustomLoginInputSkin</apiName><shortdesc>The default skin class for Spark TextInput component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>The default skin class for Spark TextInput component.  
     </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.TextInput.xml"><linktext>spark.components.TextInput</linktext></link></related-links><apiConstructor id="DisplayApplication.CustomSkins:CustomLoginInputSkin:CustomLoginInputSkin"><apiName>CustomLoginInputSkin</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.CustomSkins:CustomLoginInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="DisplayApplication.CustomSkins:CustomLoginInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:RichEditableText"/></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="DisplayApplication.ItemView"><apiName>DisplayApplication.ItemView</apiName><apiDetail/><apiClassifier id="DisplayApplication.ItemView:InstructionField"><apiName>InstructionField</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.ItemView:InstructionField:InstructionField"><apiName>InstructionField</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication.ItemView:InstructionField:instruction"><apiName>instruction</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextArea"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaBtnNext"><apiName>reaBtnNext</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.ItemView:reaBtnNext:reaBtnNext"><apiName>reaBtnNext</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaSoundImg"><apiName>reaSoundImg</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Image</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.ItemView:reaSoundImg:reaSoundImg"><apiName>reaSoundImg</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaPanelCom"><apiName>reaPanelCom</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.ItemView:reaPanelCom:reaPanelCom"><apiName>reaPanelCom</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication.ItemView:reaBackimg"><apiName>reaBackimg</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Image</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication.ItemView:reaBackimg:reaBackimg"><apiName>reaBackimg</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="DisplayApplication"><apiName>DisplayApplication</apiName><apiDetail/><apiClassifier id="DisplayApplication:LogInView"><apiName>LogInView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:LogInView:LogInView"><apiName>LogInView</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication:LogInView:innerLayout"><apiName>innerLayout</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input1"><apiName>input1</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input2"><apiName>input2</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input3"><apiName>input3</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input4"><apiName>input4</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:inputGroup"><apiName>inputGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:input"><apiName>input</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:TextInput"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:loginInstructionBox"><apiName>loginInstructionBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:loginSoundButton"><apiName>loginSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:login_newCode"><apiName>login_newCode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:login_submitButton"><apiName>login_submitButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:newuserSoundButton"><apiName>newuserSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:noButton"><apiName>noButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:pleaseEnterCode"><apiName>pleaseEnterCode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:registerInstructionBox"><apiName>registerInstructionBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:registerSoundButton"><apiName>registerSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:retryInput"><apiName>retryInput</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:retrylabel"><apiName>retrylabel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:retrysound"><apiName>retrysound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SmallSoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:testMadeInPast"><apiName>testMadeInPast</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:testedButtons"><apiName>testedButtons</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:HGroup"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:testedQuestionBox"><apiName>testedQuestionBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:yesButton"><apiName>yesButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:LogInView:yourNewCode"><apiName>yourNewCode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:StartAppView"><apiName>StartAppView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:StartAppView:StartAppView"><apiName>StartAppView</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication:StartAppView:mainAppStartButton"><apiName>mainAppStartButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:StartButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:StartAppView:videoPlayer"><apiName>videoPlayer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:VideoPlayer"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:StartAppView:videoSource"><apiName>videoSource</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components.mediaClasses:DynamicStreamingVideoSource"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:ErrorView"><apiName>ErrorView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:ErrorView:ErrorView"><apiName>ErrorView</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="DisplayApplication:DisplayWrapper"><apiName>DisplayWrapper</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:DisplayWrapper:DisplayWrapper"><apiName>DisplayWrapper</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication:DisplayWrapper:tile"><apiName>tile</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers:Tile"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:Overview"><apiName>Overview</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:Overview:Overview"><apiName>Overview</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication:Overview:button0"><apiName>button0</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:button1"><apiName>button1</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:button2"><apiName>button2</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:button3"><apiName>button3</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:chooseSubjectSnd"><apiName>chooseSubjectSnd</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:chooseSubject"><apiName>chooseSubject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:description"><apiName>description</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:levelButtonsContainer"><apiName>levelButtonsContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:levelSoundButton"><apiName>levelSoundButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:levelgroup"><apiName>levelgroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:overviewgroup"><apiName>overviewgroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:Overview:whatLevel"><apiName>whatLevel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:QuestionView"><apiName>QuestionView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:QuestionView:QuestionView"><apiName>QuestionView</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication:QuestionView:buttonArea"><apiName>buttonArea</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:QuestionView:content"><apiName>content</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:ItemViewContainer"><apiName>ItemViewContainer</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:ItemViewContainer:ItemViewContainer"><apiName>ItemViewContainer</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication:ItemViewContainer:bgContainer"><apiName>bgContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:SkinnableContainer"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:instrGroup"><apiName>instrGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:item_questionWrapperBox"><apiName>item_questionWrapperBox</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:BorderContainer"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:itembgImage"><apiName>itembgImage</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls:Image"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:ItemViewContainer:preGroup"><apiName>preGroup</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="DisplayApplication:TestFinishedView"><apiName>TestFinishedView</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="DisplayApplication:TestFinishedView:TestFinishedView"><apiName>TestFinishedView</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="DisplayApplication:TestFinishedView:FINISHED"><apiName>FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>finished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:PRINT"><apiName>PRINT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>print</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:congratsContainer"><apiName>congratsContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:congratsSound"><apiName>congratsSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:congrats"><apiName>congrats</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:endReference"><apiName>endReference</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:forwardButton"><apiName>forwardButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:CustomDesignButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:mainAppEndButton"><apiName>mainAppEndButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:CustomDesignButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:newTReference"><apiName>newTReference</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:newTestButton"><apiName>newTestButton</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:CustomDesignButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:printIcon"><apiName>printIcon</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls:Image"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:printSound"><apiName>printSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:printTextContainer"><apiName>printTextContainer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:whatNextSound"><apiName>whatNextSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication.Components:SoundButton</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:whatNext"><apiName>whatNext</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="DisplayApplication:TestFinishedView:youCanPrint"><apiName>youCanPrint</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="Interfaces"><apiName>Interfaces</apiName><apiDetail/><apiClassifier id="Interfaces:ICustomModule"><apiName>ICustomModule</apiName><shortdesc>
	 Defines the minimal criteria for a class to be a module.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Defines the minimal criteria for a class to be a module. This makes it possible for the MainAppManager to load any Module with the same abstract sequence of instructions.
	 </apiDesc></apiClassifierDetail><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:getClassDefinition"><apiName>getClassDefinition</apiName><shortdesc>
		 Returns a String of the module class plus the package name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a String of the module class plus the package name. Ensure to change their names, when refactor.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:load"><apiName>load</apiName><shortdesc>
		 Loading the module.
		 
		 Connect the modules internal variables with data from GlobalSettings, TestCollections and Session.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_globals</apiItemName><apiOperationClassifier>Model:Globals</apiOperationClassifier></apiParam><apiParam><apiItemName>_tcollection</apiItemName><apiOperationClassifier>Model:TestCollection</apiOperationClassifier></apiParam><apiParam><apiItemName>_session</apiItemName><apiOperationClassifier>Model:Session</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 <p>Loading the module.</p>
		 <p>
		 Connect the modules internal variables with data from GlobalSettings, TestCollections and Session.
		 Usually there are only some of them needed, so not all the modules will behave like in the following description.
		 </p>
		 
		 <p>loads debug states, url paths to data on the server, and text for labels from globalsettings</p>
		 <p>loads the collection of possible dimensions, levels and the associated items as Strings</p>
		 <p>loads actual session states. These can include actual dimension, actual level and actual item.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:returnLoadFinishedEvent"><apiName>returnLoadFinishedEvent</apiName><shortdesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable addEventListener(anyModuleInstance.returnLoadFinishedEvent())
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable <codeph>addEventListener(anyModuleInstance.returnLoadFinishedEvent())</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:returnModuleFinishedEvent"><apiName>returnModuleFinishedEvent</apiName><shortdesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable addEventListener(anyModuleInstance.returnModuleFinishedEvent())
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Event const cannot be accessed via get, therefore we use this method, to enable <codeph>addEventListener(anyModuleInstance.returnModuleFinishedEvent())</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:returnView"><apiName>returnView</apiName><shortdesc>
		 To access the private view component only via referencs, instead of direct access.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
		 To access the private view component only via referencs, instead of direct access.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:sendTweenFinished"><apiName>sendTweenFinished</apiName><shortdesc>
		 Tells the module, that the screen is visible and specific actions can be performed now.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Tells the module, that the screen is visible and specific actions can be performed now.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Interfaces:ICustomModule:Interfaces:ICustomModule:unload"><apiName>unload</apiName><shortdesc>
		 Unloads all contained and related objects of a module.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <p>Unloads all contained and related objects of a module. Removes all event listeners if possible and sets all objects and relations to null.</p>
		 <p>Therefore all related objects of a module should be stored in an array calles references.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Interfaces:ICustomModule:Interfaces:ICustomModule:debug:set"><apiName>debug</apiName><shortdesc>
		 Set the Debugging state to true.
		 Enables to determine errors without sourcecode by showing alertboxes, if an error occurs
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 <p>Set the Debugging state to <codeph>true</codeph>.</p>
		 <p>Enables to determine errors without sourcecode by showing alertboxes, if an error occurs</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Interfaces:ICustomModule:Interfaces:ICustomModule:soundMode:set"><apiName>soundMode</apiName><shortdesc>
		 Sets sound to on or off
		 Enables to use application without sound errors, ideal for rapid item development and debug
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 <p>Sets sound to on or off</p>
		 <p>Enables to use application without sound errors, ideal for rapid item development and debug</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:IClickableComponent"><apiName>IClickableComponent</apiName><shortdesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Defines the minimum criteria to be clickable and refer to any object, which many of the buttons need in this app.
	 
	 <p>There are many different Types of buttons in this application, many of them have refer to a sound and therefore we need to generalize the 
	 properties of a button which makes ist possible to play a sound by clickign itr dragging it</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:IClickableComponent:Interfaces:IClickableComponent:referringTo:get"><apiName>referringTo</apiName><shortdesc>
		 Get the reference to a specific sound object.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Get the reference to a specific sound object.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Interfaces:IClickableComponent:Interfaces:IClickableComponent:visibleReference:get"><apiName>visibleReference</apiName><shortdesc>
		 Get the reference to a specific visible object like an image.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Get the reference to a specific visible object like an image.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:ICustomEventDispatcher"><apiName>ICustomEventDispatcher</apiName><shortdesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 removeAllEventListeners function.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface helps to generalize objects, for example stored runtime in an array or so, to call the very helpful
	 <codeph>removeAllEventListeners</codeph> function.
	 
	 <p>It is required to extends Shared.EventDispatcher to implement this interface</p>
	 </apiDesc></apiClassifierDetail><apiOperation id="Interfaces:ICustomEventDispatcher:Interfaces:ICustomEventDispatcher:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Interfaces:ICustomSelectable"><apiName>ICustomSelectable</apiName><shortdesc>
	 This interface is for accessing information of any selectable component.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface is for accessing information of any selectable component. These components are generally used within questions. It allows the program to iterate the references and look for already selected Objects.
	 Instead of overwriting the synchronize() function in each new question class, you just have to assure it implements this interface.
	 
	 <p>By using this, it is possible to implement a radio button or check box behavior for an image or other visual components, without extending these classes</p>
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:ICustomSelectable:Interfaces:ICustomSelectable:selected:get"><apiName>selected</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Interfaces:ICustomWritable"><apiName>ICustomWritable</apiName><shortdesc>
	 Adds the textvalue to a component.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Adds the textvalue to a component. Makes possible to implement writable components and access them runtime via arrays or lists or other runtime build references.
	 </apiDesc></apiClassifierDetail><apiValue id="Interfaces:ICustomWritable:Interfaces:ICustomWritable:text:get"><apiName>text</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="ItemApplication.QuestionTypes"><apiName>ItemApplication.QuestionTypes</apiName><apiDetail/><apiClassifier id="ItemApplication.QuestionTypes:SelectAndWrite"><apiName>SelectAndWrite</apiName><shortdesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:SelectAndWrite:SelectAndWrite"><apiName>SelectAndWrite</apiName><shortdesc>
		 Constructor, calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/><apiDesc>the xmllist source file
		 </apiDesc></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/><apiDesc>path to the php script for loading images, mp3 and other data
		 </apiDesc></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/><apiDesc>the equivalent to rooturl  
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, calls superclass.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:SelectAndWrite:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 loads all required data, according to a specific questionspage.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 loads all required data, according to a specific questionspage.
		 <p>Builds questions instruction first</p>
		 <p>loads images and arranges them in a rectangle shaped group of four images</p>
		 <p>creates a textinput area next to the images group</p>
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:ScCloud"><apiName>ScCloud</apiName><shortdesc>
	 Provides a cloud of radiobuttons and labels to click.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:SingleChoice</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides a cloud of radiobuttons and labels to click. The positions within the cloud will be chosen randomly and the cloud can increase its size by having trouble with positioning elements due to limited space.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:ScCloud:ScCloud"><apiName>ScCloud</apiName><shortdesc>
		 constructor calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 constructor calls superclass.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link></related-links></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:ScCloud:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:ScCloud:protected:onMouseOutRadio"><apiName>onMouseOutRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:ScCloud:protected:onMouseOverRadio"><apiName>onMouseOverRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:SingleChoice"><apiName>SingleChoice</apiName><shortdesc>
	 Representing the process of loading, arranging and displaying data within a single choice item.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Representing the process of loading, arranging and displaying data within a single choice item. The data model is a radiobutton group, whcih allows only one choice per question.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:SingleChoice:SingleChoice"><apiName>SingleChoice</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 Displays a vertical set of Radiobuttons and Labels according to the specific questionspage, determined by the parameter.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/><apiDesc>the number of the page
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Displays a vertical set of Radiobuttons and Labels according to the specific questionspage, determined by the parameter.
		 Optional there can be an image and or a sound button before the answertext.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:protected:onAnswerLabelUpdate"><apiName>onAnswerLabelUpdate</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:FlexEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:protected:onMouseOutRadio"><apiName>onMouseOutRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:protected:onMouseOverRadio"><apiName>onMouseOverRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:QuestionsObject"><apiName>QuestionsObject</apiName><shortdesc>
	 Defines the basic structure and bahvior of a question object.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines the basic structure and bahvior of a question object. The detailed behavior like load and display data is defined in each of the extending quesion classes.
	 
	 <p>A special feature is the load content by page behavior. All Data will be loaded immediately after calling the specific questionspage and will be unloaded
	 by calling another questionpage. This frees memory and enables a fluid application.</p>
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:QuestionsObject:QuestionsObject"><apiName>QuestionsObject</apiName><shortdesc>
		 Constructor of each questions object contains a xmlList source (of questions) and the relative url path for loading data.</shortdesc><prolog><asCustoms><relativeUrl>alias for rooturl (depreaced)
		 </relativeUrl></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/><apiDesc>the source xmllist containing the item data, defined in each item xml document
		 
		 </apiDesc></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/><apiDesc>the realtive url the php script which is required to load and store data
		 
		 </apiDesc></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor of each questions object contains a xmlList source (of questions) and the relative url path for loading data. Also initializes the view component.
		 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:answerExists"><apiName>answerExists</apiName><shortdesc>
		 iterates the answer array to check if an anser was already given to a specific field.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 iterates the answer array to check if an anser was already given to a specific field. This allows a reload of a previous page with pre-existing answer settings.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 This function is the main process for displaying the content.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 This function is the main process for displaying the content. It will vary for each Questionsobject, so it need to be overridden.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:getAnswerString"><apiName>getAnswerString</apiName><shortdesc>
		 returns the answervalue, if value is a string
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 returns the answervalue, if value is a string
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:getAnswerValue"><apiName>getAnswerValue</apiName><shortdesc>
		 checks, if a value in the answer array was already given by comparing the ids.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 checks, if a value in the answer array was already given by comparing the ids.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:hasAtLeastOneListener"><apiName>hasAtLeastOneListener</apiName><shortdesc>
		 Because this Class is extending Shared.EventDispatcher, we can check if the listeners array is filled with
		 at least one reference to a listener object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Because this Class is extending <codeph>Shared.EventDispatcher</codeph>, we can check if the listeners array is filled with
		 at least one reference to a listener object. This may be required to check if an object's listener is removable.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:load"><apiName>load</apiName><shortdesc>
		 initialization of the xmllist content.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 initialization of the xmllist content. Need to be called seperately, because of EventListeners in Parent Object.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:nextQpage"><apiName>nextQpage</apiName><shortdesc>
		 This Method loops the reference array, searching for the Radiobutton Reference and get its ID and selection status.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
		 This Method loops the reference array, searching for the Radiobutton Reference and get its ID and selection status.
		 These information represents the user input and is fundamental for evaluation.
		 Evaluation is always done in <codeph>ItemObject</codeph>.
		 The clear screen behavior is not defined here but rather the change of the qpState.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="ItemApplication.QuestionTypes.qpState.xml"><linktext>qpState</linktext></link><link href="ItemApplication.xml#ItemObject"><linktext>ItemApplication.ItemObject</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:playAudio"><apiName>playAudio</apiName><shortdesc>
		 This method is called by event and plays the audio file (MP3Audio), the specific SoundButton is referring to.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
		 This method is called by event and plays the audio file (MP3Audio), the specific SoundButton is referring to.
		 The reference to the audio file is created in the <codeph>displayQuestions()</codeph> method.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject/displayQuestions();"><linktext>displayQuestions();</linktext></link><link href="" invalidHref="DisplayApplication.SoundButton.xml"><linktext>DisplayApplication.SoundButton</linktext></link><link href="Shared.xml#MP3Audio"><linktext>Shared.MP3Audio</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:prevQpage"><apiName>prevQpage</apiName><shortdesc>
		 This method is like an undo function.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
		 This method is like an undo function. Important to know: allAnswers.pop() will delete the input on the previous 
		 questionpage and substitude it with the new input.
		 The clear screen behavior is not defined here but rather the change of the qpState.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="ItemApplication.QuestionTypes.qpState.xml"><linktext>qpState</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:removeQuestions"><apiName>removeQuestions</apiName><shortdesc>
		 This method initially loops the references Array and checks if the reference has listeners or is a specific object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method initially loops the references Array and checks if the reference has listeners or is a specific object.
		 Listeners will be removed, Objects will be set to null.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="ItemApplication.QuestionTypes.references.xml"><linktext>references</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:returnAnswerList"><apiName>returnAnswerList</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:returnFirstPulseObject"><apiName>returnFirstPulseObject</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:synchronize"><apiName>synchronize</apiName><shortdesc>
		 This function is required to synchronize the answer arrays with the new answers every time a questionpage was build.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This function is required to synchronize the answer arrays with the new answers every time a questionpage was build.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:_listeners"><apiName>_listeners</apiName><shortdesc>
		 managing listeners (for parent object)
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
		 managing listeners (for parent object)
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:allAnswers"><apiName>allAnswers</apiName><shortdesc>
		 Stores the summary of all answers arrays (all answers of all questionpages)
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Stores the summary of all answers arrays (all answers of all questionpages)
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:answers"><apiName>answers</apiName><shortdesc>
		 Stores information about the recent user input, this Array is used temporary for each questionpage.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Stores information about the recent user input, this Array is used temporary for each questionpage.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:firstPulseObject"><apiName>firstPulseObject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:moduleState"><apiName>moduleState</apiName><shortdesc>
		 The state of the module.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The state of the module.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:qView"><apiName>qView</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:QuestionView</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:qpState"><apiName>qpState</apiName><shortdesc>
		 This States affects only internal processes --&gt; next page / previous page
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This States affects only internal processes --&gt; next page / previous page
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:references"><apiName>references</apiName><shortdesc>
		 stores references to all the question related instances to ensure removing
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 stores references to all the question related instances to ensure removing
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:relUrl"><apiName>relUrl</apiName><shortdesc>
		 relative url path for loading data
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
		 relative url path for loading data
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:scriptUrl"><apiName>scriptUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:source"><apiName>source</apiName><shortdesc>
		 xml source data, received from itemObject
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef><apiDesc>
		 xml source data, received from itemObject
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:_moduleState:set"><apiName>_moduleState</apiName><shortdesc>
		 Set the current module state.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Set the current module state. Important for finishing the questions and evaluate the answers in the parent object.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:_qpState:get"><apiName>_qpState</apiName><shortdesc>
		 Get the current questionspage state.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Get the current questionspage state.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:ignoreSound:get"><apiName>ignoreSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:Cloze"><apiName>Cloze</apiName><shortdesc>
	 Representing the loading, arranging and displaying data for a cloze text.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Representing the loading, arranging and displaying data for a cloze text.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:Cloze:Cloze"><apiName>Cloze</apiName><shortdesc>
		 constructor, calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/><apiDesc>see <codeph>QuestionsObject</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/><apiDesc>see <codeph>QuestionsObject</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/><apiDesc>see <codeph>QuestionsObject</codeph>
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 constructor, calls superclass.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link></related-links></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:Cloze:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 loads the certain data and displays it in a way of a text with empty text areas and soundbuttons.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/><apiDesc>the parameter indicates which questionpage is actually displayed
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 loads the certain data and displays it in a way of a text with empty text areas and soundbuttons.
		 <p>it uses the modified <codeph>HorizontalMultilineLayout</codeph> to arrange the elements in a row</p> 
		 <p>the Text will be completely split up, so every single word as well as the input area is encapsulated by a <codeph>Group</codeph> and can be Designed with css properties.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link><link href="Shared.xml#HorizontalMultilineLayout"><linktext>Shared.HorizontalMultilineLayout</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:MultipleChoice"><apiName>MultipleChoice</apiName><shortdesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item. The data model is a checkbox group, which allows one or many or all selected choices as an answer.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:MultipleChoice:MultipleChoice"><apiName>MultipleChoice</apiName><shortdesc>
		 constructor, calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 constructor, calls superclass.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link></related-links></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:MultipleChoice:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/><apiDesc>the number of the questionpage. 0 means page 1
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="ItemApplication"><apiName>ItemApplication</apiName><apiDetail/><apiClassifier id="ItemApplication:ItemEvent"><apiName>ItemEvent</apiName><shortdesc>
	 Defines a set of events realted to the item object and its children.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines a set of events realted to the item object and its children. Also stores the result xml of the actual item, in order to pass it to other handlers.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication:ItemEvent:ItemEvent"><apiName>ItemEvent</apiName><shortdesc>
		 constructor, calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>type the name of the event type, see the event constants
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>bubbles on or off
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>cancelable on or off
		 </apiDesc></apiParam><apiParam><apiItemName>_dataObject</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>the dataobject containing the finished item xml, ready to get sent to the server
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 constructor, calls superclass.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication:ItemEvent:clone"><apiName>clone</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.events:Event"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="ItemApplication:ItemEvent:DATA_RECEIVED"><apiName>DATA_RECEIVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dataReceived</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:DATA_SENT"><apiName>DATA_SENT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dataSent</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:ITEM_ONLOAD"><apiName>ITEM_ONLOAD</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemOnload</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:PAGE_CHANGED"><apiName>PAGE_CHANGED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pageChanged</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:QPAGE_FINISHED"><apiName>QPAGE_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:QPAGE_LOADED"><apiName>QPAGE_LOADED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageLoaded</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemEvent:_dataObject:get"><apiName>_dataObject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="ItemApplication:ItemObject"><apiName>ItemObject</apiName><shortdesc>
	 Represents a handler for all item releated actions.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents a handler for all item releated actions.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication:ItemObject:ItemObject"><apiName>ItemObject</apiName><shortdesc>
		 Constructor, will only be used by first instantiation.bla
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>relative_url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>the relative path to the applications root directory on the server
		 </apiDesc></apiParam><apiParam><apiItemName>item_ID</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>alias for itemnumber -&gt; combined  with relative_url will result in path to item data
		 </apiDesc></apiParam><apiParam><apiItemName>_userNumber</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>user number for writing in user folder and xml
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, will only be used by first instantiation.<codeph>bla</codeph>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication:ItemObject:alertXMLError"><apiName>alertXMLError</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:getClassDefinition"><apiName>getClassDefinition</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:load"><apiName>load</apiName><shortdesc>
		 Like in the most Classes, this class has a load method seperated from the constructor to ensure a successfull event listener setup.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_globals</apiItemName><apiOperationClassifier>Model:Globals</apiOperationClassifier></apiParam><apiParam><apiItemName>_tcollection</apiItemName><apiOperationClassifier>Model:TestCollection</apiOperationClassifier></apiParam><apiParam><apiItemName>_session</apiItemName><apiOperationClassifier>Model:Session</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Like in the most Classes, this class has a load method seperated from the constructor to ensure a successfull event listener setup.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:returnLoadFinishedEvent"><apiName>returnLoadFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:returnModuleFinishedEvent"><apiName>returnModuleFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:returnView"><apiName>returnView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:sendTweenFinished"><apiName>sendTweenFinished</apiName><shortdesc>
		 tells the class, that the screen is tweened
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 tells the class, that the screen is tweened
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:set_value"><apiName>set_value</apiName><shortdesc>
		 Old, not used.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>_node</apiItemName><apiType value="XMLList"/></apiParam><apiParam><apiItemName>_value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Old, not used.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:unload"><apiName>unload</apiName><shortdesc>
		 removes all eventlisteners from all stored objects and sets them to null
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 removes all eventlisteners from all stored objects and sets them to null
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:ItemObject:updateSeconds"><apiName>updateSeconds</apiName><shortdesc>
		 Timer for simulating a realtime clock to ensure correct timeStamp entries.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TimerEvent"/></apiParam></apiOperationDef><apiDesc>
		 Timer for simulating a realtime clock to ensure correct timeStamp entries.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="ItemApplication.timeStamp.xml"><linktext>timeStamp</linktext></link></related-links></apiOperation><apiValue id="ItemApplication:ItemObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:protected:nextItem"><apiName>nextItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:obData"><apiName>obData</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:relUrl"><apiName>relUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:userNumber"><apiName>userNumber</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:view"><apiName>view</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:ItemViewContainer</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:currentTime:get"><apiName>currentTime</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:ItemObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="ItemApplication:xmlLoader"><apiName>xmlLoader</apiName><shortdesc>
	 XML Loader Class
	 
	 Version: 	0.1.6
	 DOC: 		02.11.2010
	 Author: 	Jan Küster
	 
	 Last Update: 09.11.2010
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 XML Loader Class
	 
	 Version: 	0.1.6
	 DOC: 		02.11.2010
	 Author: 	Jan Küster
	 
	 Last Update: 09.11.2010
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication:xmlLoader:xmlLoader"><apiName>xmlLoader</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>url</apiItemName><apiType value="String"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication:xmlLoader:addEventListener"><apiName>addEventListener</apiName><shortdesc>
 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>weakRef</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="ItemApplication:xmlLoader:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="ItemApplication:xmlLoader:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="ItemApplication:xmlLoader:isPreScreen"><apiName>isPreScreen</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication:xmlLoader:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="ItemApplication:xmlLoader:willTrigger"><apiName>willTrigger</apiName><shortdesc>
 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="ItemApplication:xmlLoader:n_abilities"><apiName>n_abilities</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_answers"><apiName>n_answers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_correctResponse"><apiName>n_correctResponse</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_instruction"><apiName>n_instruction</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_itemCreation"><apiName>n_itemCreation</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_itemNumber"><apiName>n_itemNumber</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_marking"><apiName>n_marking</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_metaItem"><apiName>n_metaItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_nextitem"><apiName>n_nextitem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_preScreen"><apiName>n_preScreen</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_presets"><apiName>n_presets</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_questions"><apiName>n_questions</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_time"><apiName>n_time</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:n_userNumber"><apiName>n_userNumber</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:xload"><apiName>xload</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Shared:XLoader</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication:xmlLoader:xmlResult:get"><apiName>xmlResult</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="MainApplication"><apiName>MainApplication</apiName><apiDetail/><apiClassifier id="MainApplication:OverviewObject"><apiName>OverviewObject</apiName><shortdesc>
	 the handler class for an overview, where users will choose their next testcollection by choosing a dimension and the corresponding level.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 the handler class for an overview, where users will choose their next testcollection by choosing a dimension and the corresponding level.
	 </apiDesc></apiClassifierDetail><apiConstructor id="MainApplication:OverviewObject:OverviewObject"><apiName>OverviewObject</apiName><shortdesc>
		 constructor, initializes view component.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 constructor, initializes view component.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="MainApplication:OverviewObject:getClassDefinition"><apiName>getClassDefinition</apiName><shortdesc>
		 returns the package and calass name as a string to allow search within the loader management
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 returns the package and calass name as a string to allow search within the loader management
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:OverviewObject:load"><apiName>load</apiName><shortdesc>
		 loads path urls and labels from globals.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_globals</apiItemName><apiOperationClassifier>Model:Globals</apiOperationClassifier><apiDesc>reference to the globals lib
		 </apiDesc></apiParam><apiParam><apiItemName>_tcollection</apiItemName><apiOperationClassifier>Model:TestCollection</apiOperationClassifier><apiDesc>reference to the testcollection lib
		 </apiDesc></apiParam><apiParam><apiItemName>_session</apiItemName><apiOperationClassifier>Model:Session</apiOperationClassifier><apiDesc>reference to the session lib, not used in this class
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 loads path urls and labels from globals. Makes a reference to testcollection, because we need this later for session building.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:OverviewObject:returnLoadFinishedEvent"><apiName>returnLoadFinishedEvent</apiName><shortdesc>
		 allows adding event listeners because get function will not work for constants
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 allows adding event listeners because get function will not work for constants
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:OverviewObject:returnModuleFinishedEvent"><apiName>returnModuleFinishedEvent</apiName><shortdesc>
		 allows adding event listeners because get function will not work for constants
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 allows adding event listeners because get function will not work for constants
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:OverviewObject:returnView"><apiName>returnView</apiName><shortdesc>
		 Returns a reference to the view component.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a reference to the view component.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:OverviewObject:sendTweenFinished"><apiName>sendTweenFinished</apiName><shortdesc>
		 not used in this class
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 not used in this class
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:OverviewObject:unload"><apiName>unload</apiName><shortdesc>
		 cleanup event listeners and references 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 cleanup event listeners and references 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="MainApplication:OverviewObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc>
		 representing the event, where this class has finished the loading process
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 representing the event, where this class has finished the loading process
		 </apiDesc></apiValueDetail></apiValue><apiValue id="MainApplication:OverviewObject:debug:get"><apiName>debug</apiName><shortdesc>
		 gets debug value 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 gets debug value 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="MainApplication:OverviewObject:soundMode:get"><apiName>soundMode</apiName><shortdesc>
		 gets sounddebug value
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 gets sounddebug value
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:StartAppObject"><apiName>StartAppObject</apiName><shortdesc>
	 First module, loaded after initialization of the application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p>First module, loaded after initialization of the application. Includes a VideoPlayer for introducing the applications funcionalities.</p> 
	 </apiDesc></apiClassifierDetail><apiConstructor id="MainApplication:StartAppObject:StartAppObject"><apiName>StartAppObject</apiName><shortdesc>
		 Constructor
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="MainApplication:StartAppObject:getClassDefinition"><apiName>getClassDefinition</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:StartAppObject:load"><apiName>load</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_globals</apiItemName><apiOperationClassifier>Model:Globals</apiOperationClassifier></apiParam><apiParam><apiItemName>_tcollection</apiItemName><apiOperationClassifier>Model:TestCollection</apiOperationClassifier></apiParam><apiParam><apiItemName>_session</apiItemName><apiOperationClassifier>Model:Session</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:StartAppObject:returnLoadFinishedEvent"><apiName>returnLoadFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:StartAppObject:returnModuleFinishedEvent"><apiName>returnModuleFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:StartAppObject:returnView"><apiName>returnView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:StartAppObject:sendTweenFinished"><apiName>sendTweenFinished</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:StartAppObject:unload"><apiName>unload</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="MainApplication:StartAppObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:StartAppObject:view"><apiName>view</apiName><shortdesc>
		 The view component, which will be linked to the display.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:StartAppView</apiValueClassifier></apiValueDef><apiDesc>
		 The view component, which will be linked to the display.
		 
		 </apiDesc></apiValueDetail><related-links><link href="MainApplication.xml#MainAppManager"><linktext>MainApplication.MainAppManager</linktext></link><link href="MainApplication.xml#DisplayManager"><linktext>MainApplication.DisplayManager</linktext></link></related-links></apiValue><apiValue id="MainApplication:StartAppObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:StartAppObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:MainAppManager"><apiName>MainAppManager</apiName><shortdesc>
	 The core controller class.</shortdesc><prolog><author>Jan Küster
	 
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The core controller class.
	 Manages the loading and unloading of the modules as well as the communication between them and the model related data.
	 Modules a loaded by name, their functions are accessed via <codeph>ICustomModule</codeph> interface.
	 The view component of the modules get connected with the <codeph>DisplayManager</codeph>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="Interfaces.ICustomModule;.xml"><linktext>Interfaces.ICustomModule;</linktext></link><link href="MainApplication.xml#DisplayManager"><linktext>MainApplication.DisplayManager</linktext></link></related-links><apiConstructor id="MainApplication:MainAppManager:MainAppManager"><apiName>MainAppManager</apiName><shortdesc>
		 Constructor, no parameters.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor, no parameters.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="MainApplication:MainAppManager:getView"><apiName>getView</apiName><shortdesc>
		 Returns a reference to the view component, owned by the current module instance.</shortdesc><prolog><author>Jan Küster
		 
		 </author></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Object view object, usually a group based mxml component
		 </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a reference to the view component, owned by the current module instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:MainAppManager:sendTweenComplete"><apiName>sendTweenComplete</apiName><shortdesc>
		 Sends to the module instance, that the display tween is finished.</shortdesc><prolog><author>
		 </author></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Sends to the module instance, that the display tween is finished. This ensures a delay of starting animations or scripts until the new screen is visible.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="MainApplication:MainAppManager:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:MainAppManager:MODULE_FINISHED"><apiName>MODULE_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:TestFinishedObject"><apiName>TestFinishedObject</apiName><shortdesc>
	 After finishing a test, this Class is loaded to provide functions for printing the evaluation and choosing the further activities.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 After finishing a test, this Class is loaded to provide functions for printing the evaluation and choosing the further activities.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="MainApplication:TestFinishedObject:TestFinishedObject"><apiName>TestFinishedObject</apiName><shortdesc>
		 empty constructor
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 empty constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="MainApplication:TestFinishedObject:getClassDefinition"><apiName>getClassDefinition</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:TestFinishedObject:load"><apiName>load</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_globals</apiItemName><apiOperationClassifier>Model:Globals</apiOperationClassifier></apiParam><apiParam><apiItemName>_tcollection</apiItemName><apiOperationClassifier>Model:TestCollection</apiOperationClassifier></apiParam><apiParam><apiItemName>_session</apiItemName><apiOperationClassifier>Model:Session</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:TestFinishedObject:returnLoadFinishedEvent"><apiName>returnLoadFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:TestFinishedObject:returnModuleFinishedEvent"><apiName>returnModuleFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:TestFinishedObject:returnView"><apiName>returnView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:TestFinishedObject:sendTweenFinished"><apiName>sendTweenFinished</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:TestFinishedObject:unload"><apiName>unload</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="MainApplication:TestFinishedObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:TestFinishedObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:TestFinishedObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:DisplayManager"><apiName>DisplayManager</apiName><shortdesc>
	 The DisplayManager is one of the core classes to provide a management all visual components.</shortdesc><prolog><asMetadata><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:BorderContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DisplayManager is one of the core classes to provide a management all visual components.
	 This allows the <codeph>MainAppmanager</codeph> to include or remove specific view components of a module.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="MainApplication.xml#MainAppManager"><linktext>MainApplication.MainAppManager</linktext></link></related-links><adobeApiEvent id="MainApplication:DisplayManager:DISPLAY_TWEENEDOUT_flash.events.Event"><apiName>flash.events.Event</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>MainApplication:DisplayManager:DISPLAY_TWEENEDOUT</apiEventType><adobeApiEventClassifier>MainApplication:DisplayManager</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="MainApplication.layer.xml"><linktext>layer</linktext></link></related-links></adobeApiEvent><apiConstructor id="MainApplication:DisplayManager:DisplayManager"><apiName>DisplayManager</apiName><shortdesc>
		 Constructor, no args.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor, no args. Set the default size of the wrapper.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="MainApplication:DisplayManager:removeContent"><apiName>removeContent</apiName><shortdesc>
		 clears the screen.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 clears the screen.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:DisplayManager:setContent"><apiName>setContent</apiName><shortdesc>
		 Links the Displaymanager with the viewcomponent of the actual module.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>ob</apiItemName><apiType value="Object"/><apiDesc>an object reference to the actual module
		 </apiDesc></apiParam><apiParam><apiItemName>_title</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>defined, wether the tween is the title screen or a normal alpha tween
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Links the Displaymanager with the viewcomponent of the actual module.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="MainApplication.layer.xml"><linktext>the image which will be faded to alpha 0</linktext></link><link href="MainApplication.xml#DisplayManager/showDisplay()"><linktext>the tween animation</linktext></link></related-links></apiOperation><apiValue id="MainApplication:DisplayManager:DISPLAY_ERROR"><apiName>DISPLAY_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dispalyError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:DisplayManager:DISPLAY_TWEENEDOUT"><apiName>DISPLAY_TWEENEDOUT</apiName><shortdesc>
		 Event Const for dispatching status of tweened out / fade out complete.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayTweenedOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Event Const for dispatching status of tweened out / fade out complete.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="MainApplication.layer.xml"><linktext>layer</linktext></link></related-links></apiValue><apiValue id="MainApplication:DisplayManager:inheritedObj"><apiName>inheritedObj</apiName><shortdesc>
		 The target object, which will be dispalyed on the screen.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
		 The target object, which will be dispalyed on the screen.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:LoginObject"><apiName>LoginObject</apiName><shortdesc>
	 Represents a login form handler.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomModule</apiBaseInterface><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents a login form handler. User input will be sent to the server, server evaluates and answers with a value. The value influences the state of the handler and
	 either a login is performed or fault or a new user code is requestet.
	 </apiDesc></apiClassifierDetail><apiConstructor id="MainApplication:LoginObject:LoginObject"><apiName>LoginObject</apiName><shortdesc>
		 constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 constructor. No variables will be pased. Initializes view component.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="MainApplication:LoginObject:getClassDefinition"><apiName>getClassDefinition</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:load"><apiName>load</apiName><shortdesc>
		 Extracts the urls and paths from the globals model and prepares the http service for server request.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_globals</apiItemName><apiOperationClassifier>Model:Globals</apiOperationClassifier><apiDesc>the global settings lib object, storing all labels and paths for the application
		 </apiDesc></apiParam><apiParam><apiItemName>_tcollection</apiItemName><apiOperationClassifier>Model:TestCollection</apiOperationClassifier><apiDesc>the testcollection lib object, not used in this class
		 </apiDesc></apiParam><apiParam><apiItemName>_session</apiItemName><apiOperationClassifier>Model:Session</apiOperationClassifier><apiDesc>the session lib object, not used in this class
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Extracts the urls and paths from the globals model and prepares the http service for server request.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:requestData"><apiName>requestData</apiName><shortdesc>
		 This method starts the http request.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method starts the http request.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:returnLoadFinishedEvent"><apiName>returnLoadFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:returnModuleFinishedEvent"><apiName>returnModuleFinishedEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:returnUserData"><apiName>returnUserData</apiName><shortdesc>
		 For other objects, to retrieve userdata url.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 For other objects, to retrieve userdata url.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:returnView"><apiName>returnView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:sendTweenFinished"><apiName>sendTweenFinished</apiName><shortdesc>
		 not required in this class
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 not required in this class
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="MainApplication:LoginObject:unload"><apiName>unload</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="MainApplication:LoginObject:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:LOGIN_FAULT"><apiName>LOGIN_FAULT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>logInFault</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:LOGIN_SUCCESS"><apiName>LOGIN_SUCCESS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loginSuccess</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:REQUEST_ERROR"><apiName>REQUEST_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>requestError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:USERDATA_RECEIVED"><apiName>USERDATA_RECEIVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userDataReceived</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:protected:loginState"><apiName>loginState</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:view"><apiName>view</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:LogInView</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:data:get"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="MainApplication:LoginObject:soundMode:get"><apiName>soundMode</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="MainApplication:LoaderManagement"><apiName>LoaderManagement</apiName><shortdesc>
	 A static class, representing a sequence to arrange the required modules in a predefined order.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A static class, representing a sequence to arrange the required modules in a predefined order.
	 </apiDesc></apiClassifierDetail><apiConstructor id="MainApplication:LoaderManagement:LoaderManagement"><apiName>LoaderManagement</apiName><shortdesc>
		 constructor is empty
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 constructor is empty
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="MainApplication:LoaderManagement:getNext2Load"><apiName>getNext2Load</apiName><shortdesc>
		 Iterates a sequence of module class names and tries to find matches.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Returns a String-Name of the Class definition, which makes the module accessable via getClassByDefinition.
		 
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>moduleName</apiItemName><apiType value="String"/><apiDesc>the name of the current module to match with the sequence
		 </apiDesc></apiParam><apiParam><apiItemName>nextItem</apiItemName><apiType value="String"/><apiDesc>is a parameter which indeicated, that there is still an item in the load queue
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Iterates a sequence of module class names and tries to find matches.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="Model"><apiName>Model</apiName><apiDetail/><apiClassifier id="Model:Collection"><apiName>Collection</apiName><shortdesc>
	 A class representing one testcollection of a dimension / subject.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A class representing one testcollection of a dimension / subject. 
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="Model:Collection:Collection"><apiName>Collection</apiName><shortdesc>
		 Constructor.</shortdesc><prolog><asCustoms><soundurl>url to the sound file, related with the description text
		 </soundurl></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_name</apiItemName><apiType value="String"/><apiDesc>the name of the difficulty level
		 </apiDesc></apiParam><apiParam><apiItemName>des</apiItemName><apiType value="String"/><apiDesc>description of this collection and level
		 </apiDesc></apiParam><apiParam><apiItemName>soundurl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Model:Collection:addItems"><apiName>addItems</apiName><shortdesc>
		 adds an xmllist of items and excerps the itemnumbers.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_items</apiItemName><apiType value="XMLList"/></apiParam></apiOperationDef><apiDesc>
		 adds an xmllist of items and excerps the itemnumbers. Stored in a common array.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Collection:getDescription"><apiName>getDescription</apiName><shortdesc>
		 returns the description text of this collection
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 returns the description text of this collection
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Collection:getName"><apiName>getName</apiName><shortdesc>
		 returns the level of the collection
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 returns the level of the collection
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Collection:getSound"><apiName>getSound</apiName><shortdesc>
		 reutrns the soundurl of this collection
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 reutrns the soundurl of this collection
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Collection:returnItemAt"><apiName>returnItemAt</apiName><shortdesc>
		 reuturns an itemnumber at a specific index.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
		 reuturns an itemnumber at a specific index. Usefull if you desire the nth-item of the collection.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Collection:returnItems"><apiName>returnItems</apiName><shortdesc>
		 returns the array of items
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 returns the array of items
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Model:Session"><apiName>Session</apiName><shortdesc>
	 This is a Data Structure, where each session for one item is stored.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This is a Data Structure, where each session for one item is stored. In detail, it stores the slected dimension, level and item. This ensures, that application always knows, where the user is at the moment.
	 </apiDesc></apiClassifierDetail><apiConstructor id="Model:Session:Session"><apiName>Session</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="Model:Session:updateSession"><apiName>updateSession</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>currentDimension</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>currentLevel</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>currentItem</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Model:Session:dimension:get"><apiName>dimension</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Session:item:get"><apiName>item</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Session:level:get"><apiName>level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Session:next:get"><apiName>next</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Model:TestCollection"><apiName>TestCollection</apiName><shortdesc>
	 This class loads the xml with the contained information about subjects, levels and item IDs and parse it into an XMLLIST.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class loads the xml with the contained information about subjects, levels and item IDs and parse it into an XMLLIST. 
	 <p>The data is read-only and will be written only once when the class will be initialized</p>
	 <p>To overwirte the data, the class must be unloaded and be instanciated again</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="Model:TestCollection:TestCollection"><apiName>TestCollection</apiName><shortdesc>
		 constructor, immediately initializes http service and loads the testcollection from the related Url
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_relUrl</apiItemName><apiType value="String"/><apiDesc>the relative path to the xml file on the server, will be combined with the url String
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 constructor, immediately initializes http service and loads the testcollection from the related Url
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Model:TestCollection:getALLDimensions"><apiName>getALLDimensions</apiName><shortdesc>
		 Returns a reference to the data.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList the testcollection data as an XMLList
		 </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a reference to the data.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:TestCollection:getDimensionAt"><apiName>getDimensionAt</apiName><shortdesc>
		 Returns a specific Dimension with all its related levels and items.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>if found it returns the appropiate dimension as a Dimension object, if not it returns an empty Dimension object dummy.
		 </apiDesc><apiOperationClassifier>Model:Dimension</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>the number of one of the four possible dimensions. See your testcollection xml to determine which number represents which dimension.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a specific Dimension with all its related levels and items.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="Model.xml#Dimension"><linktext>Dimension</linktext></link></related-links></apiOperation><apiOperation id="Model:TestCollection:getDimensionByName"><apiName>getDimensionByName</apiName><shortdesc>
		 Returns a specific Dimension with all its related levels and items, determined by its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>if found it returns the appropiate dimension as a Dimension object, if not it returns an empty Dimension object dummy.
		 </apiDesc><apiOperationClassifier>Model:Dimension</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>the name of one of the four possible dimensions.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a specific Dimension with all its related levels and items, determined by its name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="Model.xml#Dimension"><linktext>Dimension</linktext></link></related-links></apiOperation><apiOperation id="Model:TestCollection:getDimensionName"><apiName>getDimensionName</apiName><shortdesc>
		 Returns the name of a dimension at a given index.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>String the name of the dimension as a String value
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>the specific index of a dimension, ranges within <codeph>[0..3]</codeph>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the name of a dimension at a given index.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:TestCollection:getLevelName"><apiName>getLevelName</apiName><shortdesc>
		 Returns the name of a level at a given index.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>String the name of the level as a String value
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>dindex</apiItemName><apiType value="int"/><apiDesc>the specific index of a dimension, ranges within the amount of levels
		 </apiDesc></apiParam><apiParam><apiItemName>lindex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
		 Returns the name of a level at a given index.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:TestCollection:searchNextItem"><apiName>searchNextItem</apiName><shortdesc>
		 Tries to find the item number of the follwer item.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>String if found, the next item id as a String, else null
		 
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>currentDimension</apiItemName><apiType value="int"/><apiDesc>the current dimension, usually stored in a session object or sent by a custommodule event
		 </apiDesc></apiParam><apiParam><apiItemName>currentLevel</apiItemName><apiType value="int"/><apiDesc>	the current level, usually stored in a session object or sent by a custommodule event
		 </apiDesc></apiParam><apiParam><apiItemName>currentItem</apiItemName><apiType value="String"/><apiDesc>	the current item, usually stored in a session object or sent by a custommodule event
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Tries to find the item number of the follwer item. If nothing is found, the actual item was the last one within the current level.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#CustomModuleEvents"><linktext>Shared.CustomModuleEvents</linktext></link><link href="Model.xml#Session"><linktext>Session</linktext></link></related-links></apiOperation><apiValue id="Model:TestCollection:TC_BUILD"><apiName>TC_BUILD</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tcBuild</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:TestCollection:TC_ERROR"><apiName>TC_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tcError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Model:UserObject"><apiName>UserObject</apiName><shortdesc>
	 This class represents the login session of a certain user.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class represents the login session of a certain user. The information are stored temporarily and usually written in an xml file which will be permanently send to the server.
	 </apiDesc></apiClassifierDetail><apiConstructor id="Model:UserObject:UserObject"><apiName>UserObject</apiName><shortdesc>
		 Constructor, initializes the URLLoader but does not call its load() function.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/><apiDesc>the include script (php) on the server
		 </apiDesc></apiParam><apiParam><apiItemName>_id</apiItemName><apiType value="String"/><apiDesc>the user id from the login
		 </apiDesc></apiParam><apiParam><apiItemName>navigate2url</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>for debugging purposes, opens the navigated url in a new tab or window to enable a view of php echos or error messages
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, initializes the <codeph>URLLoader</codeph> but does not call its <codeph>load()</codeph> function.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Model:UserObject:load"><apiName>load</apiName><shortdesc>
		 First adds variables to the URLLoader to define the parameter for the include script and the Post variable userid then starts the request.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 First adds variables to the URLLoader to define the parameter for the include script and the Post variable userid then starts the request.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:UserObject:setDebug"><apiName>setDebug</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Model:UserObject:startSession"><apiName>startSession</apiName><shortdesc>
		 Constructs a new entry for the actual Dimension and level, chosen by the user into.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>itemList</apiItemName><apiType value="Array"/><apiDesc>An array of all item names within the chosen dimension and level
		 </apiDesc></apiParam><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>the chosen dimension or sometimes called subject
		 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiType value="String"/><apiDesc>the level of difficulty
		 </apiDesc></apiParam><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/><apiDesc>the directlink to the php script, which will handle the data
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Constructs a new entry for the actual Dimension and level, chosen by the user into. Calls the private <codeph>updateUserXML(scriptUrl)</codeph> function, 
		 to send the updated xml to php.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="Model.xml#UserObject/updateUserXML()"><linktext>updateUserXML()</linktext></link></related-links></apiOperation><apiOperation id="Model:UserObject:updateSession"><apiName>updateSession</apiName><shortdesc>
		 Updates a session by adding an entry at the data attribute of the item tag.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>timestamp</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>finalXml</apiItemName><apiType value="XML"/></apiParam><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Updates a session by adding an entry at the data attribute of the item tag. (After item was completed) The entry consists of the
		 userName, the timestamp and the itemnumber and the ending <codeph>.xml</codeph>. 
		 <p>This sequence will also be the name of the immediate path to the completed item xml file, which usually will be placed in the same directory as the user xml file</p>
		 <p>Calls the private function   <codeph>updateUserXML(scriptUrl)</codeph> to send the data to the server.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Model:UserObject:CREATION_COMPLETE"><apiName>CREATION_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:CREATION_ERROR"><apiName>CREATION_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:protected:_test"><apiName>_test</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="XMLList"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:relUrl"><apiName>relUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:protected:state"><apiName>state</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:protected:tempTimeStamp"><apiName>tempTimeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:userData"><apiName>userData</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:userName"><apiName>userName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:UserObject:_userData:get"><apiName>_userData</apiName><shortdesc>
		 returns the userdata as an xml object
		 
		 </shortdesc><prolog><asCustoms><returns>user data file as an xml object
		 </returns></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="XML"/></apiValueDef><apiDesc>
		 returns the userdata as an xml object
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Model:Dimension"><apiName>Dimension</apiName><shortdesc>
	 This class represents a dimension or subject with all its included data.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class represents a dimension or subject with all its included data.
	 </apiDesc></apiClassifierDetail><apiConstructor id="Model:Dimension:Dimension"><apiName>Dimension</apiName><shortdesc>
		 Constructor
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_name</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>des</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Model:Dimension:addCollectionToList"><apiName>addCollectionToList</apiName><shortdesc>
		 adds a collection object to the collection list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>c</apiItemName><apiOperationClassifier>Model:Collection</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 adds a collection object to the collection list. useful if once the collection is created out of an xmllist.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Dimension:addToCollectionList"><apiName>addToCollectionList</apiName><shortdesc>
		 adds an xmllist to the collection list.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="XMLList"/></apiParam></apiOperationDef><apiDesc>
		 adds an xmllist to the collection list. usually a collection is stored as an xml file, so it can be decoded by itering an xmllis.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Dimension:getDescription"><apiName>getDescription</apiName><shortdesc>
		 returns the description of this dimension
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 returns the description of this dimension
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Dimension:getName"><apiName>getName</apiName><shortdesc>
		 returns the name of this dimension 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 returns the name of this dimension 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Dimension:getSoundUrl"><apiName>getSoundUrl</apiName><shortdesc>
		 returns the soundurl of this dimension
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 returns the soundurl of this dimension
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Dimension:returnCollectionAt"><apiName>returnCollectionAt</apiName><shortdesc>
		 returns a specific collection by passing an index number as parameter.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Collection Object (level)
		 </apiDesc><apiOperationClassifier>Model:Collection</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>the index of the desired collection
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 returns a specific collection by passing an index number as parameter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Model:Dimension:returnCollection"><apiName>returnCollection</apiName><shortdesc>
		 returns the entire collectionList as an array
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 returns the entire collectionList as an array
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Model:Globals"><apiName>Globals</apiName><shortdesc>
	 This class is a model for all global settings like paths and labels.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class is a model for all global settings like paths and labels.
	 
	 <p>The globals.xml file will be analysed and the particular data will be stored in different arrays</p>
	 </apiDesc></apiClassifierDetail><apiConstructor id="Model:Globals:Globals"><apiName>Globals</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor. Http Service will be set up.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Model:Globals:returnLabelValue"><apiName>returnLabelValue</apiName><shortdesc>
		 returns a specific label by comparing the id of the path.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 returns a specific label by comparing the id of the path.
		 Usually it will ba an UrlTypeEnum but it can also be any string.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="enumTypes.UrlTypeEnums.xml"><linktext>enumTypes.UrlTypeEnums</linktext></link></related-links></apiOperation><apiOperation id="Model:Globals:returnPathValue"><apiName>returnPathValue</apiName><shortdesc>
		 returns a specific path by comparing the id of the path.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 returns a specific path by comparing the id of the path.
		 Usually it will ba an UrlTypeEnum but it can also be any string.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="enumTypes.UrlTypeEnums.xml"><linktext>enumTypes.UrlTypeEnums</linktext></link></related-links></apiOperation><apiValue id="Model:Globals:GLOBALS_FAULT"><apiName>GLOBALS_FAULT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>globalsFault</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Globals:GLOBALS_LOADED"><apiName>GLOBALS_LOADED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>globalsLoaded</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Model:Globals:debugMode:get"><apiName>debugMode</apiName><shortdesc>
		 returns a boolean value, whether debug is enabled or disabled
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 returns a boolean value, whether debug is enabled or disabled
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Model:Globals:labels:get"><apiName>labels</apiName><shortdesc>
		 reutns all labels stored in an array 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
		 reutns all labels stored in an array 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Model:Globals:paths:get"><apiName>paths</apiName><shortdesc>
		 returns all paths stored in an array
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
		 returns all paths stored in an array
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Model:Globals:soundIgnore:get"><apiName>soundIgnore</apiName><shortdesc>
		 returns a boolean value, whether sound is enabled or disabled
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 returns a boolean value, whether sound is enabled or disabled
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="Shared"><apiName>Shared</apiName><apiDetail/><apiClassifier id="Shared:UserEvent"><apiName>UserEvent</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:UserEvent:UserEvent"><apiName>UserEvent</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>_subject</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_level</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_user</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="Shared:UserEvent:clone"><apiName>clone</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.events:Event"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:UserEvent:ENDTEST_CHOSEN"><apiName>ENDTEST_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>endTestChosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:NEWTEST_CHOSEN"><apiName>NEWTEST_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>newTestChosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:START_APPLICATION"><apiName>START_APPLICATION</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startApplication</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:SUBJ_AND_LEVEL_CHOSEN"><apiName>SUBJ_AND_LEVEL_CHOSEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subjandlevelchosen</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:USERDATA_RECEIVED"><apiName>USERDATA_RECEIVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userDataReceived</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_level:get"><apiName>_level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_subject:get"><apiName>_subject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:UserEvent:_userData:get"><apiName>_userData</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:XMLWriter"><apiName>XMLWriter</apiName><shortdesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 XML writer Class
	 Version: 	0.1.2
	  DOC: 		09.11.2010
	 Author: 	Jan Küster
	  Last Update: 12.01.2011
	  Description:
	 Similar to XLoader, this Class is made for connecting to php but sending data instead of retreiving data.
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:XMLWriter:XMLWriter"><apiName>XMLWriter</apiName><shortdesc>
		 Constructor with presettings of parameters.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_relUrl</apiItemName><apiType value="String"/><apiDesc>The complete item XML File (required, cannot be null)
		 </apiDesc></apiParam><apiParam><apiItemName>_xml</apiItemName><apiType value="XML"/><apiDesc>The timestamp, given by the itemObject 
		 </apiDesc></apiParam><apiParam><apiItemName>_date</apiItemName><apiType value="String"/><apiData/><apiDesc>the complete Document name to be written 
		 </apiDesc></apiParam><apiParam><apiItemName>_name</apiItemName><apiType value="String"/><apiData/><apiDesc>the user name / iD (default ID is test)
		 </apiDesc></apiParam><apiParam><apiItemName>_user</apiItemName><apiType value="String"/><apiData>test</apiData><apiDesc>there are different types of php scripts, whhich can be requested, the parameter indicates which specific script will be called.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>_param</apiItemName><apiType value="Number"/><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor with presettings of parameters. The parameters representing the values which are required to make PHP write a new XML document with the correct information.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:XMLWriter:send_httpReq"><apiName>send_httpReq</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:XMLWriter:send_urlReq"><apiName>send_urlReq</apiName><shortdesc>
		 In this method, a variables object willl be created to store all data in one object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 In this method, a variables object willl be created to store all data in one object. In php you will be able to refer to it, by 
		 accessing the <codeph>§_POST['variables.something']</codeph> array. Depending on the param variable, different scripts will be loaded.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:MP3Audio"><apiName>MP3Audio</apiName><shortdesc>
	 Creates a new wrapper for loaded mp3 files.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Creates a new wrapper for loaded mp3 files. Can handle all required events for a common mp3 player like play, pause, stop etc. The underlying data structure is a Sound Object.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.media.Sound.xml"><linktext>flash.media.Sound</linktext></link><link href="" invalidHref="flash.media.SoundChannel.xml"><linktext>flash.media.SoundChannel</linktext></link></related-links><apiConstructor id="Shared:MP3Audio:MP3Audio"><apiName>MP3Audio</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_scriptUrl</apiItemName><apiType value="String"/><apiDesc>the path to the include script on the server
		 </apiDesc></apiParam><apiParam><apiItemName>relPath</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	the relative path to the mp3 object
		 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>		allows to set an id for accessing objects at runtime
		 </apiDesc></apiParam><apiParam><apiItemName>navigate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>for debug purposes, navigates to url of the include script
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor. Requires an url to load an mp3 from an external source. events will be auto-build.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:MP3Audio:pause"><apiName>pause</apiName><shortdesc>
		 manually pauses the sound object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 manually pauses the sound object.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:playAudio"><apiName>playAudio</apiName><shortdesc>
		 opens the soundchannel and adds the playing soundobject to it.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 opens the soundchannel and adds the playing soundobject to it. enabled to autodetect, when the soundobject finished playing. isPlaying will be set to true.
		 Does nothing if the sound object is null. This can happen for example if the unload method was called external or internal when an error occured.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#MP3Audio/returnIsPlaying()"><linktext>returnIsPlaying()</linktext></link></related-links></apiOperation><apiOperation id="Shared:MP3Audio:returnIsPlaying"><apiName>returnIsPlaying</apiName><shortdesc>
		 return if the underlying sound object is in playing state
		 
		 </shortdesc><prolog><asCustoms><returns>Boolean isPlaying true if playing false if not
		 </returns></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 return if the underlying sound object is in playing state
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:returnProgress"><apiName>returnProgress</apiName><shortdesc>
		 returns a progress value for external objects to access the loading state of the sound object
		 
		 </shortdesc><prolog><asCustoms><returns>Number a percent value as a number
		 </returns></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
		 returns a progress value for external objects to access the loading state of the sound object
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:setDebug"><apiName>setDebug</apiName><shortdesc>
		 lets an external class set this state to debugMode, allows to show alert boxes on screen
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 lets an external class set this state to debugMode, allows to show alert boxes on screen
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:stop"><apiName>stop</apiName><shortdesc>
		 stops a sound.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 stops a sound.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MP3Audio:unload"><apiName>unload</apiName><shortdesc>
		 unloads soundObject related events and the object itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 unloads soundObject related events and the object itself.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Shared:MP3Audio:FINISHED_PLAYING"><apiName>FINISHED_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>finishedPLaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:INIT_COMPLETE"><apiName>INIT_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>initComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:LOAD_COMPLETE"><apiName>LOAD_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:ONLOAD_ERROR"><apiName>ONLOAD_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>onLoadError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:PAUSE_PLAYING"><apiName>PAUSE_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pausePlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:START_PLAYING"><apiName>START_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startPlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:STOPPED_PLAYING"><apiName>STOPPED_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stoppedPlaying</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:id"><apiName>id</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:MP3Audio:parent"><apiName>parent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:ErrorDispatcher"><apiName>ErrorDispatcher</apiName><shortdesc>
	 Static class.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Static class. Prepares a custom error type to be send to server which writes an error log
	 </apiDesc></apiClassifierDetail><apiOperation id="Shared:ErrorDispatcher:processNewError"><apiName>processNewError</apiName><shortdesc>
		 creates an sends a new error message by combining the parameters and adding a timestamp.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>error</apiItemName><apiType value="String"/><apiDesc>custom number of error type
		 </apiDesc></apiParam><apiParam><apiItemName>description</apiItemName><apiType value="String"/><apiDesc>custom description of error type
		 </apiDesc></apiParam><apiParam><apiItemName>flashErrorId</apiItemName><apiType value="String"/><apiDesc>original falsh error id
		 </apiDesc></apiParam><apiParam><apiItemName>causedBy</apiItemName><apiType value="String"/><apiDesc>the source of the error
		 </apiDesc></apiParam><apiParam><apiItemName>line</apiItemName><apiType value="String"/><apiDesc>the module and if important also the line (line is usually useless, due to continual development)
		 </apiDesc></apiParam><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/><apiDesc>the url to the php script
		 </apiDesc></apiParam><apiParam><apiItemName>navigate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>for debugging, shows the target url
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 creates an sends a new error message by combining the parameters and adding a timestamp. Then a urlloader will be created to request the specific php script which will write the message into a log file.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:HorizontalMultilineLayout"><apiName>HorizontalMultilineLayout</apiName><shortdesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.</shortdesc><prolog><asMetadata/><asCustoms><tzi.de>
	 Modification: Layout-in-Row --&gt; Text can be aligned into middle, top or bottom align in each line,
	 Text can be aligned by the measurements of a source element (e.g. an image) in each line, Text can be aligned by a fixed
	 pixel value in each line. 
	 </tzi.de></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Lays out elements the same way as text area positions words: putting them in
	 one line and going to next line when there is no space for new word.
	 
	 copyright: Maxim Kachurovskiy
	 http://cookbooks.adobe.com/post_Horizontal_Multiline_Layout-17807.html
	 
	 Code is modified by Jan Kuester, University of bremen jank87</apiDesc></apiClassifierDetail><apiOperation id="Shared:HorizontalMultilineLayout:measure"><apiName>measure</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:HorizontalMultilineLayout:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:HorizontalMultilineLayout:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:lineHeightInPixel:get"><apiName>lineHeightInPixel</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:lineHeightSource:get"><apiName>lineHeightSource</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:ILayoutElement"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingRight:get"><apiName>paddingRight</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:paddingTop:get"><apiName>paddingTop</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalGap:get"><apiName>verticalGap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:HorizontalMultilineLayout:verticalLayoutInLine:get"><apiName>verticalLayoutInLine</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomImage"><apiName>CustomImage</apiName><shortdesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>mx.controls:Image</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Basic class which automatically loads an image from url and catches errors as well as allows a dynamic adding or removing of eventlisteners. Be aware, that it requires the data as a base64 string.
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:CustomImage:CustomImage"><apiName>CustomImage</apiName><shortdesc>
 			Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>scriptUrl</apiItemName><apiType value="String"/><apiDesc>the url to the script which loads the image
		 </apiDesc></apiParam><apiParam><apiItemName>relPath</apiItemName><apiType value="String"/><apiDesc>	the path parameter passed to the url via POST
		 </apiDesc></apiParam><apiParam><apiItemName>navigate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>for debugging purposes, navigates to the url of the script
 		</apiDesc></apiParam></apiConstructorDef><apiDesc>
 			Constructor. Requires an url and a relative path to the image file. Will automatically loads the image as a base64 string and decodes it to an image source.
		
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:CustomImage:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:hasAtLeastOneListener"><apiName>hasAtLeastOneListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomImage:setDebug"><apiName>setDebug</apiName><shortdesc>
		 sets the debug value to the desired value true or fals
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>the new value for the components debugmode
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 sets the debug value to the desired value true or fals
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Shared:CustomImage:CREATION_COMPLETE"><apiName>CREATION_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationcomplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomButton"><apiName>CustomButton</apiName><shortdesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.</shortdesc><prolog><asMetadata><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseInterface>Interfaces:IClickableComponent</apiBaseInterface><apiBaseClassifier>spark.components:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An extended Button class, implementing the minimum criteria for linking to other objects and removeAllEventListeners function.
	 <p>Most buttons in this Application will extend this</p>
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:CustomButton:CustomButton"><apiName>CustomButton</apiName><shortdesc>
		 empty constructor
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 empty constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:CustomButton:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomButton:hasAtLeastOneListener"><apiName>hasAtLeastOneListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomButton:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiOperation id="Shared:CustomButton:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="Shared.xml#EventDispatcher"><linktext>Shared.EventDispatcher</linktext></link></related-links></apiOperation><apiValue id="Shared:CustomButton:referringTo:get"><apiName>referringTo</apiName><shortdesc>
		 get the reference to the linked object
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 get the reference to the linked object
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:CustomButton:visibleReference:get"><apiName>visibleReference</apiName><shortdesc>
		 gets a reference to a linked visible object
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 gets a reference to a linked visible object
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:StaticFunctions"><apiName>StaticFunctions</apiName><shortdesc>
	 This Class contains a set of static functions which will be called by any class in the project.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This Class contains a set of static functions which will be called by any class in the project.
	 Its a kind of collection of generic functions. 
	 </apiDesc></apiClassifierDetail><apiOperation id="Shared:StaticFunctions:check_exists"><apiName>check_exists</apiName><shortdesc>
		 Function for Debugging
		 
		 </shortdesc><prolog><asCustoms><returns>A boolean value <code>true</code> if object exists.
		 </returns></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Object"/><apiDesc>Can be any object, class whatever, important: Classpath needed!
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Function for Debugging
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:convertToString"><apiName>convertToString</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:fadeOutSound"><apiName>fadeOutSound</apiName><shortdesc>
		 Provides a smooth fade out for all now-running sound files.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Provides a smooth fade out for all now-running sound files.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:getDropSh"><apiName>getDropSh</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.filters:DropShadowFilter"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:getGloFil"><apiName>getGloFil</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.filters:GlowFilter"/></apiReturn><apiParam><apiItemName>_color</apiItemName><apiType value="uint"/><apiData>0xFFD799</apiData></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiData>10</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:makeVisible"><apiName>makeVisible</apiName><shortdesc>
		 Can make display components visible or invisible.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>_id</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
		 Can make display components visible or invisible.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:pulseFocus"><apiName>pulseFocus</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:removeStringTabs"><apiName>removeStringTabs</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>input</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:resize"><apiName>resize</apiName><shortdesc>
		 Provides a tween animation for resizing Display Objects.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>arr</apiItemName><apiType value="Array"/><apiDesc>The object which needs to be resized. (important: obj must be a view component)
		 </apiDesc></apiParam><apiParam><apiItemName>targetWidth</apiItemName><apiType value="Number"/><apiDesc>The desired width of the object
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData>smaller</apiData><apiDesc>Describes in which way the object will be resized. Options: smaller bigger mirror smallerToZero
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Provides a tween animation for resizing Display Objects.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:stopPulse"><apiName>stopPulse</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:tweenAlpha"><apiName>tweenAlpha</apiName><shortdesc>
		 This animation tween is used to fade in and out but will only work on components wihtout children whose alpha value is used between 0 and 1.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>The Object which will be faded. Important is, that you only use Display Objects ().
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData>out</apiData><apiDesc>the type of the tween animation 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This animation tween is used to fade in and out but will only work on components wihtout children whose alpha value is used between 0 and 1.
		 This would cause that those values will be manipulated as well! The components will loose their smooth gradient fashioned look. So be careful if you use this method.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticFunctions:xtrace"><apiName>xtrace</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>txt</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>col</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:StaticFunctions:OBJECT_FADE_IN"><apiName>OBJECT_FADE_IN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectFadeIn</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:OBJECT_FADE_OUT"><apiName>OBJECT_FADE_OUT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectFadeOut</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:OBJECT_RESIZED"><apiName>OBJECT_RESIZED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>objectResized</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:alpha"><apiName>alpha</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:sizeX"><apiName>sizeX</apiName><shortdesc>
		 for resizeX method
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 for resizeX method
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:staticDispatcher"><apiName>staticDispatcher</apiName><shortdesc>
		 Allows a static class to dispatch Events dynamically.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>Shared:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
		 Allows a static class to dispatch Events dynamically.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:targets"><apiName>targets</apiName><shortdesc>
		 Pointer on multiple Object to use within a method of this class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Pointer on multiple Object to use within a method of this class. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:target"><apiName>target</apiName><shortdesc>
		 Pointer on a single Object to use within multple methods (especially event driven methods).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
		 Pointer on a single Object to use within multple methods (especially event driven methods).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:StaticFunctions:tweenObj"><apiName>tweenObj</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:StaticMath"><apiName>StaticMath</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:StaticMath:StaticMath"><apiName>StaticMath</apiName><shortdesc>
		 A collection of static functions, calculating things you might need somewhere.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 A collection of static functions, calculating things you might need somewhere.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:StaticMath:getRandomSquarePosition"><apiName>getRandomSquarePosition</apiName><shortdesc>
		 This is a full working shuffle function.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>the width of the current element, which will be compared with the others
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>the height of the current element, which will be compared with the others
		 </apiDesc></apiParam><apiParam><apiItemName>boundx</apiItemName><apiType value="Number"/><apiDesc>the maxwidth of the elements target container
		 </apiDesc></apiParam><apiParam><apiItemName>boundy</apiItemName><apiType value="Number"/><apiDesc>the maxheight of the elements targetcontainer
		 </apiDesc></apiParam><apiParam><apiItemName>compare</apiItemName><apiType value="Array"/><apiDesc>the array of all elements to compare with
		 </apiDesc></apiParam><apiParam><apiItemName>maxIndex</apiItemName><apiType value="uint"/><apiDesc>the maximum amount of steps in the compare loop. assume there are only a few elements with a position set before, so the loop breaks at those who still have not obtained a position.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This is a full working shuffle function. It auto-increases the y-bounds, if there is no more possible placement of an element. The max effort is n, before the bounds will increase.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:StaticMath:square2squareHit"><apiName>square2squareHit</apiName><shortdesc>
		 Square to Square hit test working by exclusion, which is more performant for the case, that usually there would be no collision.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>x2</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y2</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>width2</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height2</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 Square to Square hit test working by exclusion, which is more performant for the case, that usually there would be no collision.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:MyBase64Decoder"><apiName>MyBase64Decoder</apiName><shortdesc>
	 A utility class to decode a Base64 encoded String to a ByteArray.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to decode a Base64 encoded String to a ByteArray. Extends Shared.EventDispatcher to dispatch and remove events dynamically
	 
	  
	  </apiDesc></apiClassifierDetail><apiConstructor id="Shared:MyBase64Decoder:MyBase64Decoder"><apiName>MyBase64Decoder</apiName><shortdesc>
		 Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor.
		  
		  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:MyBase64Decoder:decode"><apiName>decode</apiName><shortdesc>
		 Decodes a Base64 encoded String and adds the result to an internal
		 buffer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>encoded</apiItemName><apiType value="String"/><apiDesc>The Base64 encoded String to decode.
		  
		  </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Decodes a Base64 encoded String and adds the result to an internal
		 buffer. Subsequent calls to this method add on to the internal
		 buffer. After all data have been encoded, call <codeph>toByteArray()</codeph>
		 to obtain a decoded <codeph>flash.utils.ByteArray</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MyBase64Decoder:reset"><apiName>reset</apiName><shortdesc>
		 Clears all buffers and resets the decoder to its initial state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Clears all buffers and resets the decoder to its initial state.
		  
		  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Shared:MyBase64Decoder:toByteArray"><apiName>toByteArray</apiName><shortdesc>
		 Returns the current buffer as a decoded flash.utils.ByteArray.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The decoded <codeph>flash.utils.ByteArray</codeph>.
		  
		  </apiDesc><apiType value="flash.utils:ByteArray"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the current buffer as a decoded <codeph>flash.utils.ByteArray</codeph>.
		 Note that calling this method also clears the buffer and resets the 
		 decoder to its initial state.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Shared:MyBase64Decoder:BYTES_CONVERTED"><apiName>BYTES_CONVERTED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bytesConverted</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:ItemEvent"><apiName>ItemEvent</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:ItemEvent:ItemEvent"><apiName>ItemEvent</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>_current</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_next</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>_time</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="Shared:ItemEvent:clone"><apiName>clone</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.events:Event"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:ItemEvent:ITEM_FINISHED"><apiName>ITEM_FINISHED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFinished</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:ITEM_PLUS"><apiName>ITEM_PLUS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemPlus</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:QPAGE_BACK"><apiName>QPAGE_BACK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageBack</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:QPAGE_FORWARD"><apiName>QPAGE_FORWARD</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>qpageForward</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:START_ITEM"><apiName>START_ITEM</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startItem</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:WRITE_DATA"><apiName>WRITE_DATA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>writeData</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:currentItem"><apiName>currentItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:nextItem"><apiName>nextItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:timeStamp"><apiName>timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_currentItem:get"><apiName>_currentItem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_nextitem:get"><apiName>_nextitem</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:ItemEvent:_timeStamp:get"><apiName>_timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:CustomModuleEvents"><apiName>CustomModuleEvents</apiName><shortdesc>
	 An event class for passing session related values via event.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An event class for passing session related values via event. Especially useful if you want to avoid to code this into an interface (and therefore into all other module classes).
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:CustomModuleEvents:CustomModuleEvents"><apiName>CustomModuleEvents</apiName><shortdesc>
		 Constructor, calls superclass and passes parameters.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>the passed user id
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiDesc>	the id of the actual item, used to determine the successor item
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiDesc>	the timestamp needed for writing the files on the server in order to the actual time
		 </apiDesc></apiParam><apiParam><apiItemName>_userDataUrl</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>		the chosen level of the testcollection
		 </apiDesc></apiParam><apiParam><apiItemName>_itemString</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	the chosen dimension of the testcollection
		 </apiDesc></apiParam><apiParam><apiItemName>_timeStamp</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	determines if the following module is an item, if <codeph>true</codeph>, the next module should be an item AND the item id to load will be dtermined by <codeph>_itemString</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>_level</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>	contains the updated item xml (after an item was completed). ready to be sent to the server
		 </apiDesc></apiParam><apiParam><apiItemName>_dimension</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>_isNext</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>updated</apiItemName><apiType value="XML"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
		 Constructor, calls superclass and passes parameters.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Shared:CustomModuleEvents:clone"><apiName>clone</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.events:Event"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="Shared:CustomModuleEvents:MODULE_FINISHED"><apiName>MODULE_FINISHED</apiName><shortdesc>
		 Declares the state of being ready to unload.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moduleFinished</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Declares the state of being ready to unload. Related to any module.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_dimension:get"><apiName>_dimension</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_isNext:get"><apiName>_isNext</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_itemString:get"><apiName>_itemString</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_level:get"><apiName>_level</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_timeStamp:get"><apiName>_timeStamp</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_updatedXML:get"><apiName>_updatedXML</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:CustomModuleEvents:_userDataUrl:get"><apiName>_userDataUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="Shared:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>Interfaces:ICustomEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class overrides the eventdispatcher to allow a removal of all eventListeners of an Object.
	 Idea and concept by Justin Shacklette, Copyright holds Justin Shacklette www.saturnboy.com
	 </apiDesc></apiClassifierDetail><apiConstructor id="Shared:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="Shared:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:EventDispatcher:removeAllEventListeners"><apiName>removeAllEventListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiData/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="Shared:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="Shared:XLoader"><apiName>XLoader</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="Shared:XLoader:XLoader"><apiName>XLoader</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_url</apiItemName><apiType value="String"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="Shared:XLoader:service"><apiName>service</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="mx.rpc.http:HTTPService"/></apiValueDef></apiValueDetail></apiValue><apiValue id="Shared:XLoader:result:get"><apiName>result</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="__Global__"><apiName>__Global__</apiName><apiDetail/><apiClassifier id="globalClassifier:_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory"><apiName>_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory"><apiName>_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:allowDomainInRSL"><apiName>allowDomainInRSL</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Calls Security.allowDomain() for the SWF associated with this IFlexModuleFactory
      plus all the SWFs assocatiated with RSLs preLoaded by this IFlexModuleFactory.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Calls Security.allowDomain() for the SWF associated with this IFlexModuleFactory
      plus all the SWFs assocatiated with RSLs preLoaded by this IFlexModuleFactory.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:allowInsecureDomainInRSL"><apiName>allowInsecureDomainInRSL</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Calls Security.allowInsecureDomain() for the SWF associated with this IFlexModuleFactory
      plus all the SWFs assocatiated with RSLs preLoaded by this IFlexModuleFactory.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Calls Security.allowInsecureDomain() for the SWF associated with this IFlexModuleFactory
      plus all the SWFs assocatiated with RSLs preLoaded by this IFlexModuleFactory.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:callInContext"><apiName>callInContext</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:create"><apiName>create</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>params</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:info"><apiName>info</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="_7c6d34871b0ac0ad4b3a036660ab5f8c11c45c9128172b6580088b7d06e67c87_mx_core_FlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      The RSLs loaded by this system manager before the application
      starts.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      The RSLs loaded by this system manager before the application
      starts. RSLs loaded by the application are not included in this list.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:xmlTest"><apiName>xmlTest</apiName><shortdesc/><prolog><asMetadata><DefaultProperty name="mxmlContentFactory"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Application</apiBaseClassifier></apiClassifierDef><apiDesc/></apiClassifierDetail><apiConstructor id="xmlTest:xmlTest"><apiName>xmlTest</apiName><shortdesc>Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructor.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="xmlTest:dManager"><apiName>dManager</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>MainApplication:DisplayManager</apiValueClassifier></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="enumTypes"><apiName>enumTypes</apiName><apiDetail/><apiClassifier id="enumTypes:ErrorTypeEnum"><apiName>ErrorTypeEnum</apiName><shortdesc>
	 Enumeration of error types to indicate the number and the type of the error.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Enumeration of error types to indicate the number and the type of the error.
	 </apiDesc></apiClassifierDetail><apiConstructor id="enumTypes:ErrorTypeEnum:ErrorTypeEnum"><apiName>ErrorTypeEnum</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>newValue</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>newOrdinal</apiItemName><apiType value="int"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="enumTypes:ErrorTypeEnum:selectByValue"><apiName>selectByValue</apiName><shortdesc>
		 looks for an enumeration by a passed string value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>enumTypes:ErrorTypeEnum</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 looks for an enumeration by a passed string value. Returns null of not found.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="enumTypes:ErrorTypeEnum:CANNOT_LOAD_MODULE"><apiName>CANNOT_LOAD_MODULE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:CANNOT_PLAY_AUDIO_ERROR"><apiName>CANNOT_PLAY_AUDIO_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:NULLREFERENCE"><apiName>NULLREFERENCE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:URL_INVALID_ERROR"><apiName>URL_INVALID_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:ErrorTypeEnum</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:ErrorTypeEnum:list:get"><apiName>list</apiName><shortdesc>
		 returns an array with all enums.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 returns an array with all enums.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="enumTypes:PHPParameterTypeEnum"><apiName>PHPParameterTypeEnum</apiName><shortdesc>
	 Collection of enumeration ids, to access php parameters.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Collection of enumeration ids, to access php parameters. They are hardcoded, so changes in this file will require changes in the include php file and vice versa.
	 </apiDesc></apiClassifierDetail><apiConstructor id="enumTypes:PHPParameterTypeEnum:PHPParameterTypeEnum"><apiName>PHPParameterTypeEnum</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>newValue</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>newOrdinal</apiItemName><apiType value="int"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor. See extended class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="enumTypes:PHPParameterTypeEnum:selectByValue"><apiName>selectByValue</apiName><shortdesc>
		 looks for an enumeration by a passed string value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>enumTypes:PHPParameterTypeEnum</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 looks for an enumeration by a passed string value. Returns null of not found.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="enumTypes:PHPParameterTypeEnum:CREATE_NEW_USER"><apiName>CREATE_NEW_USER</apiName><shortdesc>
		 The parametername to access the newUser script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the newUser script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_AUDIO"><apiName>GET_AUDIO</apiName><shortdesc>
		 The parametername to access the getAudio script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getAudio script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_IMAGE"><apiName>GET_IMAGE</apiName><shortdesc>
		 The parametername to access the getImage script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getImage script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_ITEM_DATA"><apiName>GET_ITEM_DATA</apiName><shortdesc>
		 The parametername to access the getItem script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getItem script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:GET_USERDATA"><apiName>GET_USERDATA</apiName><shortdesc>
		 The parametername to access the getUser script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the getUser script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:LOGIN"><apiName>LOGIN</apiName><shortdesc>
		 The parameter name to access the loginScript in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parameter name to access the loginScript in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:SEND_ERROR_MESSAGE"><apiName>SEND_ERROR_MESSAGE</apiName><shortdesc>
		 The parametername to access the sendError script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the sendError script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:SEND_FINAL_XML"><apiName>SEND_FINAL_XML</apiName><shortdesc>
		 The parametername to access the sendFinalXml script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the sendFinalXml script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:UPDATE_USER"><apiName>UPDATE_USER</apiName><shortdesc>
		 The parametername to access the updateUser script in the php include file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:PHPParameterTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The parametername to access the updateUser script in the php include file.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:PHPParameterTypeEnum:list:get"><apiName>list</apiName><shortdesc>
		 returns an array with all enums.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 returns an array with all enums.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="enumTypes:UrlTypeEnum"><apiName>UrlTypeEnum</apiName><shortdesc>
	 Collection of enumeration ids, to access globals parameters.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>enumTypes:BasicEnumeration</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Collection of enumeration ids, to access globals parameters. They are hardcoded, so changes in this file will require changes in the globals file and vice versa.
	 </apiDesc></apiClassifierDetail><apiConstructor id="enumTypes:UrlTypeEnum:UrlTypeEnum"><apiName>UrlTypeEnum</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>newValue</apiItemName><apiType value="String"/><apiDesc>the string value, represented by the enumeration.
		 </apiDesc></apiParam><apiParam><apiItemName>newOrdinal</apiItemName><apiType value="int"/><apiDesc>the position in the sequence of the enumeration.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="enumTypes:UrlTypeEnum:selectByValue"><apiName>selectByValue</apiName><shortdesc>
		 looks for an enumeration by a passed string value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>enumTypes:UrlTypeEnum</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 looks for an enumeration by a passed string value. Returns null of not found.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="enumTypes:UrlTypeEnum:INCLUDE_SCRIPT"><apiName>INCLUDE_SCRIPT</apiName><shortdesc>
		 The relative path to the includescript.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the includescript. Must be combined with ROOT to a full usable url
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:ITEM"><apiName>ITEM</apiName><shortdesc>
		 The relative path to the itemData directories.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the itemData directories. Must be combined with ROOT. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:ROOT"><apiName>ROOT</apiName><shortdesc>
		 Represents the root url on the server.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 Represents the root url on the server. It must be a realtive path to the root directory of this application and will be combined with other paths to load specific data or scripts
		 
		 <p>Example: <codeph>http://mydomain.subdomain.com/apps/thisapp/</codeph></p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:SOUNDS"><apiName>SOUNDS</apiName><shortdesc>
		 The relative path to the application sounds on the serve.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the application sounds on the serve. Does not include item sounds. Must be combined with ROOT. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:USER"><apiName>USER</apiName><shortdesc>
		 The relative path to the userData directories.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>enumTypes:UrlTypeEnum</apiValueClassifier></apiValueDef><apiDesc>
		 The relative path to the userData directories. Must be combined with ROOT.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="enumTypes:UrlTypeEnum:list:get"><apiName>list</apiName><shortdesc>
		returns an array with all enums.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		returns an array with all enums.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="enumTypes:BasicEnumeration"><apiName>BasicEnumeration</apiName><shortdesc>
	 Basic grid of an enumeration.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Basic grid of an enumeration.
	 </apiDesc></apiClassifierDetail><apiConstructor id="enumTypes:BasicEnumeration:BasicEnumeration"><apiName>BasicEnumeration</apiName><shortdesc>
		 Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>newValue</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>newOrdinal</apiItemName><apiType value="int"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="enumTypes:BasicEnumeration:getNumber"><apiName>getNumber</apiName><shortdesc>
		 Get the ordinal number of an enum-.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Get the ordinal number of an enum-.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="enumTypes:BasicEnumeration:getValue"><apiName>getValue</apiName><shortdesc>
		 Get the String value of an enum.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Get the String value of an enum.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="enumTypes:BasicEnumeration:protected:_list"><apiName>_list</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:BasicEnumeration:protected:ordinal"><apiName>ordinal</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="enumTypes:BasicEnumeration:protected:value"><apiName>value</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage></allClasses>