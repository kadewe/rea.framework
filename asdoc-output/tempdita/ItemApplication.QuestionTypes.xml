<?xml version="1.0" encoding="UTF-8"?><apiPackage id="ItemApplication.QuestionTypes"><apiName>ItemApplication.QuestionTypes</apiName><apiDetail/><apiClassifier id="ItemApplication.QuestionTypes:SelectAndWrite"><apiName>SelectAndWrite</apiName><shortdesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents the process of loading, arrangin and displaying data for a selection of images and a textarea.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:SelectAndWrite:SelectAndWrite"><apiName>SelectAndWrite</apiName><shortdesc>
		 Constructor, calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/><apiDesc>the xmllist source file
		 </apiDesc></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/><apiDesc>path to the php script for loading images, mp3 and other data
		 </apiDesc></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/><apiDesc>the equivalent to rooturl  
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor, calls superclass.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:SelectAndWrite:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 loads all required data, according to a specific questionspage.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 loads all required data, according to a specific questionspage.
		 <p>Builds questions instruction first</p>
		 <p>loads images and arranges them in a rectangle shaped group of four images</p>
		 <p>creates a textinput area next to the images group</p>
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:ScCloud"><apiName>ScCloud</apiName><shortdesc>
	 Provides a cloud of radiobuttons and labels to click.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:SingleChoice</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides a cloud of radiobuttons and labels to click. The positions within the cloud will be chosen randomly and the cloud can increase its size by having trouble with positioning elements due to limited space.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:ScCloud:ScCloud"><apiName>ScCloud</apiName><shortdesc>
		 constructor calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 constructor calls superclass.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link></related-links></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:ScCloud:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:ScCloud:protected:onMouseOutRadio"><apiName>onMouseOutRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:ScCloud:protected:onMouseOverRadio"><apiName>onMouseOverRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:SingleChoice"><apiName>SingleChoice</apiName><shortdesc>
	 Representing the process of loading, arranging and displaying data within a single choice item.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Representing the process of loading, arranging and displaying data within a single choice item. The data model is a radiobutton group, whcih allows only one choice per question.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:SingleChoice:SingleChoice"><apiName>SingleChoice</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 Displays a vertical set of Radiobuttons and Labels according to the specific questionspage, determined by the parameter.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/><apiDesc>the number of the page
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Displays a vertical set of Radiobuttons and Labels according to the specific questionspage, determined by the parameter.
		 Optional there can be an image and or a sound button before the answertext.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:protected:onAnswerLabelUpdate"><apiName>onAnswerLabelUpdate</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:FlexEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:protected:onMouseOutRadio"><apiName>onMouseOutRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:SingleChoice:protected:onMouseOverRadio"><apiName>onMouseOverRadio</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:QuestionsObject"><apiName>QuestionsObject</apiName><shortdesc>
	 Defines the basic structure and bahvior of a question object.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Shared:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines the basic structure and bahvior of a question object. The detailed behavior like load and display data is defined in each of the extending quesion classes.
	 
	 <p>A special feature is the load content by page behavior. All Data will be loaded immediately after calling the specific questionspage and will be unloaded
	 by calling another questionpage. This frees memory and enables a fluid application.</p>
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:QuestionsObject:QuestionsObject"><apiName>QuestionsObject</apiName><shortdesc>
		 Constructor of each questions object contains a xmlList source (of questions) and the relative url path for loading data.</shortdesc><prolog><asCustoms><relativeUrl>alias for rooturl (depreaced)
		 </relativeUrl></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/><apiDesc>the source xmllist containing the item data, defined in each item xml document
		 
		 </apiDesc></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/><apiDesc>the realtive url the php script which is required to load and store data
		 
		 </apiDesc></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 Constructor of each questions object contains a xmlList source (of questions) and the relative url path for loading data. Also initializes the view component.
		 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:answerExists"><apiName>answerExists</apiName><shortdesc>
		 iterates the answer array to check if an anser was already given to a specific field.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 iterates the answer array to check if an anser was already given to a specific field. This allows a reload of a previous page with pre-existing answer settings.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 This function is the main process for displaying the content.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 This function is the main process for displaying the content. It will vary for each Questionsobject, so it need to be overridden.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:getAnswerString"><apiName>getAnswerString</apiName><shortdesc>
		 returns the answervalue, if value is a string
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 returns the answervalue, if value is a string
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:getAnswerValue"><apiName>getAnswerValue</apiName><shortdesc>
		 checks, if a value in the answer array was already given by comparing the ids.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 checks, if a value in the answer array was already given by comparing the ids.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:hasAtLeastOneListener"><apiName>hasAtLeastOneListener</apiName><shortdesc>
		 Because this Class is extending Shared.EventDispatcher, we can check if the listeners array is filled with
		 at least one reference to a listener object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Because this Class is extending <codeph>Shared.EventDispatcher</codeph>, we can check if the listeners array is filled with
		 at least one reference to a listener object. This may be required to check if an object's listener is removable.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:load"><apiName>load</apiName><shortdesc>
		 initialization of the xmllist content.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 initialization of the xmllist content. Need to be called seperately, because of EventListeners in Parent Object.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:nextQpage"><apiName>nextQpage</apiName><shortdesc>
		 This Method loops the reference array, searching for the Radiobutton Reference and get its ID and selection status.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
		 This Method loops the reference array, searching for the Radiobutton Reference and get its ID and selection status.
		 These information represents the user input and is fundamental for evaluation.
		 Evaluation is always done in <codeph>ItemObject</codeph>.
		 The clear screen behavior is not defined here but rather the change of the qpState.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="ItemApplication.QuestionTypes.qpState.xml"><linktext>qpState</linktext></link><link href="ItemApplication.xml#ItemObject"><linktext>ItemApplication.ItemObject</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:playAudio"><apiName>playAudio</apiName><shortdesc>
		 This method is called by event and plays the audio file (MP3Audio), the specific SoundButton is referring to.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
		 This method is called by event and plays the audio file (MP3Audio), the specific SoundButton is referring to.
		 The reference to the audio file is created in the <codeph>displayQuestions()</codeph> method.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject/displayQuestions();"><linktext>displayQuestions();</linktext></link><link href="" invalidHref="DisplayApplication.SoundButton.xml"><linktext>DisplayApplication.SoundButton</linktext></link><link href="Shared.xml#MP3Audio"><linktext>Shared.MP3Audio</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:prevQpage"><apiName>prevQpage</apiName><shortdesc>
		 This method is like an undo function.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
		 This method is like an undo function. Important to know: allAnswers.pop() will delete the input on the previous 
		 questionpage and substitude it with the new input.
		 The clear screen behavior is not defined here but rather the change of the qpState.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="ItemApplication.QuestionTypes.qpState.xml"><linktext>qpState</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:removeQuestions"><apiName>removeQuestions</apiName><shortdesc>
		 This method initially loops the references Array and checks if the reference has listeners or is a specific object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method initially loops the references Array and checks if the reference has listeners or is a specific object.
		 Listeners will be removed, Objects will be set to null.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="ItemApplication.QuestionTypes.references.xml"><linktext>references</linktext></link></related-links></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:returnAnswerList"><apiName>returnAnswerList</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:returnFirstPulseObject"><apiName>returnFirstPulseObject</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="ItemApplication.QuestionTypes:QuestionsObject:protected:synchronize"><apiName>synchronize</apiName><shortdesc>
		 This function is required to synchronize the answer arrays with the new answers every time a questionpage was build.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This function is required to synchronize the answer arrays with the new answers every time a questionpage was build.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:_listeners"><apiName>_listeners</apiName><shortdesc>
		 managing listeners (for parent object)
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
		 managing listeners (for parent object)
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:allAnswers"><apiName>allAnswers</apiName><shortdesc>
		 Stores the summary of all answers arrays (all answers of all questionpages)
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Stores the summary of all answers arrays (all answers of all questionpages)
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:answers"><apiName>answers</apiName><shortdesc>
		 Stores information about the recent user input, this Array is used temporary for each questionpage.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 Stores information about the recent user input, this Array is used temporary for each questionpage.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:firstPulseObject"><apiName>firstPulseObject</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:moduleState"><apiName>moduleState</apiName><shortdesc>
		 The state of the module.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The state of the module.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:qView"><apiName>qView</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>DisplayApplication:QuestionView</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:qpState"><apiName>qpState</apiName><shortdesc>
		 This States affects only internal processes --&gt; next page / previous page
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This States affects only internal processes --&gt; next page / previous page
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:references"><apiName>references</apiName><shortdesc>
		 stores references to all the question related instances to ensure removing
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
		 stores references to all the question related instances to ensure removing
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:relUrl"><apiName>relUrl</apiName><shortdesc>
		 relative url path for loading data
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
		 relative url path for loading data
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:protected:scriptUrl"><apiName>scriptUrl</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:source"><apiName>source</apiName><shortdesc>
		 xml source data, received from itemObject
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="XMLList"/></apiValueDef><apiDesc>
		 xml source data, received from itemObject
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:_moduleState:set"><apiName>_moduleState</apiName><shortdesc>
		 Set the current module state.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Set the current module state. Important for finishing the questions and evaluate the answers in the parent object.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:_qpState:get"><apiName>_qpState</apiName><shortdesc>
		 Get the current questionspage state.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Get the current questionspage state.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:debug:get"><apiName>debug</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="ItemApplication.QuestionTypes:QuestionsObject:ignoreSound:get"><apiName>ignoreSound</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:Cloze"><apiName>Cloze</apiName><shortdesc>
	 Representing the loading, arranging and displaying data for a cloze text.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Representing the loading, arranging and displaying data for a cloze text.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:Cloze:Cloze"><apiName>Cloze</apiName><shortdesc>
		 constructor, calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/><apiDesc>see <codeph>QuestionsObject</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/><apiDesc>see <codeph>QuestionsObject</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/><apiDesc>see <codeph>QuestionsObject</codeph>
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 constructor, calls superclass.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link></related-links></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:Cloze:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 loads the certain data and displays it in a way of a text with empty text areas and soundbuttons.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/><apiDesc>the parameter indicates which questionpage is actually displayed
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 loads the certain data and displays it in a way of a text with empty text areas and soundbuttons.
		 <p>it uses the modified <codeph>HorizontalMultilineLayout</codeph> to arrange the elements in a row</p> 
		 <p>the Text will be completely split up, so every single word as well as the input area is encapsulated by a <codeph>Group</codeph> and can be Designed with css properties.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link><link href="Shared.xml#HorizontalMultilineLayout"><linktext>Shared.HorizontalMultilineLayout</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="ItemApplication.QuestionTypes:MultipleChoice"><apiName>MultipleChoice</apiName><shortdesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>ItemApplication.QuestionTypes:QuestionsObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents the process of loading, arranging and displaying data within a multiple choice item. The data model is a checkbox group, which allows one or many or all selected choices as an answer.
	 </apiDesc></apiClassifierDetail><apiConstructor id="ItemApplication.QuestionTypes:MultipleChoice:MultipleChoice"><apiName>MultipleChoice</apiName><shortdesc>
		 constructor, calls superclass.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>_source</apiItemName><apiType value="XMLList"/></apiParam><apiParam><apiItemName>scripturl</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>relativeUrl</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
		 constructor, calls superclass.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="ItemApplication.QuestionTypes.xml#QuestionsObject"><linktext>QuestionsObject</linktext></link></related-links></apiConstructor><apiOperation id="ItemApplication.QuestionTypes:MultipleChoice:displayQuestions"><apiName>displayQuestions</apiName><shortdesc>
		 
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="Number"/><apiDesc>the number of the questionpage. 0 means page 1
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>